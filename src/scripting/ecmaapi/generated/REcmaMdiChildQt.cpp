// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is not copyable.
        
        #include "REcmaMdiChildQt.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
                #include "RDocument.h"
            
                #include "RDocumentInterface.h"
            
                #include "RGraphicsViewQt.h"
            
            
        // includes for base ecma wrapper classes
        
                  #include "REcmaModifiedListener.h"
                 void REcmaMdiChildQt::init(QScriptEngine& engine, QScriptValue* proto 
    
    ) 
    
    {

    bool protoCreated = false;
    if(proto == NULL){
        proto = new QScriptValue(engine.newVariant(qVariantFromValue(
                (RMdiChildQt*) 0)));
        protoCreated = true;
    }

    
        // primary base class QMdiSubWindow:
        
            QScriptValue dpt = engine.defaultPrototype(
                qMetaTypeId<QMdiSubWindow*>());

            if (dpt.isValid()) {
                proto->setPrototype(dpt);
            }
          
        /*
        REcmaModifiedListener::init(engine, proto);
          
        */
    

    QScriptValue fun;

    // toString:
    REcmaHelper::registerFunction(&engine, proto, toString, "toString");
    

    // destroy:
    REcmaHelper::registerFunction(&engine, proto, destroy, "destroy");
    
        // conversion for base class QMdiSubWindow
        REcmaHelper::registerFunction(&engine, proto, getQMdiSubWindow, "getQMdiSubWindow");
        
        // conversion for base class RModifiedListener
        REcmaHelper::registerFunction(&engine, proto, getRModifiedListener, "getRModifiedListener");
        

    // get class name
    REcmaHelper::registerFunction(&engine, proto, getClassName, "getClassName");
    

    // conversion to all base classes (multiple inheritance):
    REcmaHelper::registerFunction(&engine, proto, getBaseClasses, "getBaseClasses");
    

        // properties of secondary base class RModifiedListener:
        

        // methods of secondary base class RModifiedListener:
        

    // properties:
    

    // methods:
    
            REcmaHelper::registerFunction(&engine, proto, setDocumentInterface, "setDocumentInterface");
            
            REcmaHelper::registerFunction(&engine, proto, getDocumentInterface, "getDocumentInterface");
            
            REcmaHelper::registerFunction(&engine, proto, getDocument, "getDocument");
            
            REcmaHelper::registerFunction(&engine, proto, getLastKnownViewWithFocus, "getLastKnownViewWithFocus");
            
            REcmaHelper::registerFunction(&engine, proto, updateModifiedListener, "updateModifiedListener");
            
            REcmaHelper::registerFunction(&engine, proto, setCloseEventRejected, "setCloseEventRejected");
            
            REcmaHelper::registerFunction(&engine, proto, setCloseEventAccepted, "setCloseEventAccepted");
            
            REcmaHelper::registerFunction(&engine, proto, isCloseEventAccepted, "isCloseEventAccepted");
            
        engine.setDefaultPrototype(
            qMetaTypeId<RMdiChildQt*>(), *proto);

        
                        qScriptRegisterMetaType<
                        RMdiChildQt*>(
                        &engine, toScriptValue, fromScriptValue, *proto);
                    
    

    QScriptValue ctor = engine.newFunction(create, *proto, 2);
    
    // static methods:
    

    // static properties:
    

    // enum values:
    

    // enum conversions:
    
        
    // init class:
    engine.globalObject().setProperty("RMdiChildQt",
    ctor, QScriptValue::SkipInEnumeration);
    
    if( protoCreated ){
       delete proto;
    }
    
    }
     QScriptValue REcmaMdiChildQt::create(QScriptContext* context, QScriptEngine* engine) 
    
    {
    if (context->thisObject().strictlyEquals(
       engine->globalObject())) {
       return REcmaHelper::throwError(
       QString::fromLatin1("RMdiChildQt(): Did you forget to construct with 'new'?"),
           context);
    }

    QScriptValue result;
        
            // generate constructor variants:
            
    if( context->argumentCount() ==
        0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ constructor:
    
            // non-copyable class:
            RMdiChildQt
                    * cppResult =
                    new
                    RMdiChildQt
                    ();
                
                    result = engine->newQObject(context->thisObject(), cppResult);
                
    } else 

    if( context->argumentCount() ==
        1
                && (
                
                        context->argument(
                        0
                        ).isQObject()
                        ||
                    
                        context->argument(
                        0
                        ).isNull()
                ) /* type: QWidget * */
            
    ){
    // prepare arguments:
    
            // argument isQObject
            QWidget *
            a0 =
            qobject_cast<
            QWidget *>
            ( context->argument(
            0
            ).
            toQObject()
            );
        
    // end of arguments

    // call C++ constructor:
    
            // non-copyable class:
            RMdiChildQt
                    * cppResult =
                    new
                    RMdiChildQt
                    (
                    a0
                    );
                
                    result = engine->newQObject(context->thisObject(), cppResult);
                
    } else 

    {
       return REcmaHelper::throwError(
       QString::fromLatin1("RMdiChildQt(): no matching constructor found."),
           context);
    }
    
    return result;
    }
    

    // conversion functions for base classes:
     QScriptValue REcmaMdiChildQt::getQMdiSubWindow(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                QMdiSubWindow* cppResult =
                    qscriptvalue_cast<RMdiChildQt*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
             QScriptValue REcmaMdiChildQt::getRModifiedListener(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                RModifiedListener* cppResult =
                    qscriptvalue_cast<RMdiChildQt*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
            

    // returns class name:
     QScriptValue REcmaMdiChildQt::getClassName(QScriptContext *context, QScriptEngine *engine) 
        
    {
        return qScriptValueFromValue(engine, QString("RMdiChildQt"));
    }
    

    // returns all base classes (in case of multiple inheritance):
     QScriptValue REcmaMdiChildQt::getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        
    {
        QStringList list;
        
        list.append("QMdiSubWindow");
    
        list.append("RModifiedListener");
    

        return qScriptValueFromSequence(engine, list);
    }
    
        // properties of secondary base class RModifiedListener:
        

        // methods of secondary base class RModifiedListener:
        

    // properties:
    

    // public methods:
     QScriptValue
        REcmaMdiChildQt::setDocumentInterface
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMdiChildQt::setDocumentInterface", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMdiChildQt::setDocumentInterface";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMdiChildQt* self = 
                        getSelf("setDocumentInterface", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMdiChildQt: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setDocumentInterface(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMdiChildQt.setDocumentInterface().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMdiChildQt::setDocumentInterface", context, engine);
            return result;
        }
         QScriptValue
        REcmaMdiChildQt::getDocumentInterface
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMdiChildQt::getDocumentInterface", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMdiChildQt::getDocumentInterface";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMdiChildQt* self = 
                        getSelf("getDocumentInterface", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RDocumentInterface *'
    RDocumentInterface * cppResult =
        
               self->getDocumentInterface();
        // return type: RDocumentInterface *
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMdiChildQt.getDocumentInterface().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMdiChildQt::getDocumentInterface", context, engine);
            return result;
        }
         QScriptValue
        REcmaMdiChildQt::getDocument
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMdiChildQt::getDocument", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMdiChildQt::getDocument";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMdiChildQt* self = 
                        getSelf("getDocument", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RDocument *'
    RDocument * cppResult =
        
               self->getDocument();
        // return type: RDocument *
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMdiChildQt.getDocument().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMdiChildQt::getDocument", context, engine);
            return result;
        }
         QScriptValue
        REcmaMdiChildQt::getLastKnownViewWithFocus
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMdiChildQt::getLastKnownViewWithFocus", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMdiChildQt::getLastKnownViewWithFocus";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMdiChildQt* self = 
                        getSelf("getLastKnownViewWithFocus", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RGraphicsViewQt *'
    RGraphicsViewQt * cppResult =
        
               self->getLastKnownViewWithFocus();
        // return type: RGraphicsViewQt *
                // QObject
                result = engine->newQObject(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMdiChildQt.getLastKnownViewWithFocus().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMdiChildQt::getLastKnownViewWithFocus", context, engine);
            return result;
        }
         QScriptValue
        REcmaMdiChildQt::updateModifiedListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMdiChildQt::updateModifiedListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMdiChildQt::updateModifiedListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMdiChildQt* self = 
                        getSelf("updateModifiedListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RStorage * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RStorage * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RStorage >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMdiChildQt: Argument 0 is not of type RStorage *RStorage *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->updateModifiedListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMdiChildQt.updateModifiedListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMdiChildQt::updateModifiedListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMdiChildQt::setCloseEventRejected
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMdiChildQt::setCloseEventRejected", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMdiChildQt::setCloseEventRejected";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMdiChildQt* self = 
                        getSelf("setCloseEventRejected", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setCloseEventRejected();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMdiChildQt.setCloseEventRejected().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMdiChildQt::setCloseEventRejected", context, engine);
            return result;
        }
         QScriptValue
        REcmaMdiChildQt::setCloseEventAccepted
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMdiChildQt::setCloseEventAccepted", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMdiChildQt::setCloseEventAccepted";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMdiChildQt* self = 
                        getSelf("setCloseEventAccepted", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setCloseEventAccepted();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMdiChildQt.setCloseEventAccepted().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMdiChildQt::setCloseEventAccepted", context, engine);
            return result;
        }
         QScriptValue
        REcmaMdiChildQt::isCloseEventAccepted
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMdiChildQt::isCloseEventAccepted", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMdiChildQt::isCloseEventAccepted";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMdiChildQt* self = 
                        getSelf("isCloseEventAccepted", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isCloseEventAccepted();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMdiChildQt.isCloseEventAccepted().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMdiChildQt::isCloseEventAccepted", context, engine);
            return result;
        }
         QScriptValue REcmaMdiChildQt::toString
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RMdiChildQt* self = getSelf("toString", context);
    
    QString result;
    
            result = QString("RMdiChildQt(0x%1)").arg((unsigned long int)self, 0, 16);
        
    return QScriptValue(result);
    }
     QScriptValue REcmaMdiChildQt::destroy(QScriptContext *context, QScriptEngine *engine)
    
    {

        RMdiChildQt* self = getSelf("RMdiChildQt", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        
    
        delete self;
        context->thisObject().setData(engine->nullValue());
        context->thisObject().prototype().setData(engine->nullValue());
        context->thisObject().setPrototype(engine->nullValue());
        context->thisObject().setScriptClass(NULL);
        return engine->undefinedValue();
    }
    RMdiChildQt* REcmaMdiChildQt::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RMdiChildQt* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RMdiChildQt >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RMdiChildQt.%1(): "
                        "This object is not a RMdiChildQt").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        RMdiChildQt* REcmaMdiChildQt::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RMdiChildQt* selfBase = getSelf(fName, context);
                RMdiChildQt* self = dynamic_cast<RMdiChildQt*>(selfBase);
                //return REcmaHelper::scriptValueTo<RMdiChildQt >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RMdiChildQt.%1(): "
                    "This object is not a RMdiChildQt").arg(fName),
                    context);
            }

            return self;
            


        }
         void fromScriptValue(const QScriptValue& value,
        RMdiChildQt*
        &out) {
            QObject* o = value.toQObject();
            out = qobject_cast<
            RMdiChildQt*>(o);
        }
     QScriptValue toScriptValue(QScriptEngine *engine,
        RMdiChildQt*
        const &in){
            QScriptValue s = engine->newQObject(in, QScriptEngine::QtOwnership,
            QScriptEngine::PreferExistingWrapperObject);
            /*
            if(s.isNull()){
               REcmaHelper::throwError("This object is null.", engine->currentContext());
            }
            */
            return s;
        }
    