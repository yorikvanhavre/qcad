<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src"
xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++"
dir="./core" filename="RDocument.h">
  <comment type="block">/** * Copyright (c) 2011-2013 by Andrew
  Mustun. All rights reserved. * * This file is part of the QCAD
  project. * * QCAD is free software: you can redistribute it
  and/or modify * it under the terms of the GNU General Public
  License as published by * the Free Software Foundation, either
  version 3 of the License, or * (at your option) any later
  version. * * QCAD is distributed in the hope that it will be
  useful, * but WITHOUT ANY WARRANTY; without even the implied
  warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE. See the * GNU General Public License for more details. *
  * You should have received a copy of the GNU General Public
  License * along with QCAD. */</comment>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>RDOCUMENT_H</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <name>RDOCUMENT_H</name></cpp:define>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"core_global.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QString&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QSharedPointer&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RBlock.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RBlockReferenceEntity.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"REntity.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RNonCopyable.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RRequireHeap.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RSpatialIndex.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RTransactionStack.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RUcs.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RLayer.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RLinetype.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RView.h"</cpp:file></cpp:include>
  <class_decl>class 
  <name>RVector</name>;</class_decl>
  <class_decl>class 
  <name>RStorage</name>;</class_decl>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>RDEFAULT_QVARIANT</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <name>RDEFAULT_QVARIANT</name>
  <name>QVariant</name>()</cpp:define>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <name>RDEFAULT_QLIST_RS_ENTITYTYPE</name>
  <name>QList</name>&lt;RS::EntityType&gt;()</cpp:define>
  <comment type="block">/** * A graphics document contains and owns
  entities, layers, user coordinate * systems, variables, block
  definitions, etc. * * Every document maintains a spatial index
  for fast entity lookups. * Documents also handle transactions
  through a \ref RTransactionStack. * A document is backed by an
  \ref RStorage implementation to * store the document for the
  duration of the document's lifetime. * * \ingroup core *
  \scriptable */</comment>
  <class>class 
  <macro>
    <name>QCADCORE_EXPORT</name>
  </macro>
  <name>RDocument</name>
  <super>: 
  <specifier>public</specifier>
  <name>RRequireHeap</name>, 
  <name>RNonCopyable</name></super>
  <block>{
  <private type="default"></private>
  <public>public: 
  <constructor_decl>
  <name>RDocument</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>RStorage</name>&amp;</type>
      <name>storage</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>RSpatialIndex</name>&amp;</type>
      <name>spatialIndex</name>
    </decl>
  </param>)</parameter_list>;</constructor_decl>
  <destructor_decl>
  <specifier>virtual</specifier>
  <name>~RDocument</name>
  <parameter_list>()</parameter_list>;</destructor_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>init</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
  <name>RStorage</name>&amp;</type>
  <name>getStorage</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
  <name>const</name>
  <name>RStorage</name>&amp;</type>
  <name>getStorage</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
  <name>RSpatialIndex</name>&amp;</type>
  <name>getSpatialIndex</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
  <name>RTransactionStack</name>&amp;</type>
  <name>getTransactionStack</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>clear</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>
    <name>REntity</name>::
    <name>Id</name></name>
  </type>
  <name>queryClosestXY</name>
  <parameter_list>( 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>wcsPosition</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>range</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>draft</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>includeLockedLayers</name>=
    <init>
      <expr>
        <name>true</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>
    <name>REntity</name>::
    <name>Id</name></name>
  </type>
  <name>queryClosestXY</name>
  <parameter_list>( 
  <param>
    <decl>
      <type>
      <name>QSet
      <argument_list>&lt;
      <argument>
        <name>
        <name>REntity</name>::
        <name>Id</name></name>
      </argument>&gt;</argument_list></name>&amp;</type>
      <name>candidates</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>wcsPosition</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>range</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>draft</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>RObject</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryAllObjects</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryAllEntities</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>undone</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>allBlocks</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>
      <name>RS</name>::
      <name>EntityType</name></name>
    </type>
    <name>type</name>=
    <init>
      <expr>
        <name>
        <name>RS</name>::
        <name>EntityAll</name></name>
      </expr>
    </init></decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>RUcs</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryAllUcs</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>RLayer</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryAllLayers</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>RBlock</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryAllBlocks</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>RView</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryAllViews</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>RLinetype</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryAllLinetypes</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryLayerEntities</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RLayer</name>::
        <name>Id</name></name>
      </type>
      <name>layerId</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>allBlocks</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryBlockEntities</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RBlock</name>::
        <name>Id</name></name>
      </type>
      <name>blockId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryChildEntities</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>REntity</name>::
        <name>Id</name></name>
      </type>
      <name>parentId</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>
      <name>RS</name>::
      <name>EntityType</name></name>
    </type>
    <name>type</name>=
    <init>
      <expr>
        <name>
        <name>RS</name>::
        <name>EntityAll</name></name>
      </expr>
    </init></decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>hasChildEntities</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>REntity</name>::
        <name>Id</name></name>
      </type>
      <name>parentId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryBlockReferences</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RBlock</name>::
        <name>Id</name></name>
      </type>
      <name>blockId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryAllBlockReferences</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryContainedEntities</name>
  <parameter_list>( 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RBox</name>&amp;</type>
      <name>box</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryInfiniteEntities</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryIntersectedEntitiesXY</name>
  <parameter_list>( 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RBox</name>&amp;</type>
      <name>box</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>checkBoundingBoxOnly</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>includeLockedLayers</name>=
    <init>
      <expr>
        <name>true</name>
      </expr>
    </init></decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>
      <name>RBlock</name>::
      <name>Id</name></name>
    </type>
    <name>blockId</name>=
    <init>
      <expr>
        <name>
        <name>RBlock</name>::
        <name>INVALID_ID</name></name>
      </expr>
    </init></decl>
  </param>, 
  <param>
    <decl>
    <type>
    <name>const</name>
    <name>QList
    <argument_list>&lt;
    <argument>
      <name>
      <name>RS</name>::
      <name>EntityType</name></name>
    </argument>&gt;</argument_list></name>&amp;</type>
    <name>filter</name>=
    <init>
      <expr>
        <name>RDEFAULT_QLIST_RS_ENTITYTYPE</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QMap
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>, 
    <argument>
      <name>QSet
      <argument_list>&lt;
      <argument>
        <name>int</name>
      </argument>&gt;</argument_list></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryIntersectedShapesXY</name>
  <parameter_list>( 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RBox</name>&amp;</type>
      <name>box</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>checkBoundingBoxOnly</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>includeLockedLayers</name>=
    <init>
      <expr>
        <name>true</name>
      </expr>
    </init></decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>
      <name>RBlock</name>::
      <name>Id</name></name>
    </type>
    <name>blockId</name>=
    <init>
      <expr>
        <name>
        <name>RBlock</name>::
        <name>INVALID_ID</name></name>
      </expr>
    </init></decl>
  </param>, 
  <param>
    <decl>
    <type>
    <name>const</name>
    <name>QList
    <argument_list>&lt;
    <argument>
      <name>
      <name>RS</name>::
      <name>EntityType</name></name>
    </argument>&gt;</argument_list></name>&amp;</type>
    <name>filter</name>=
    <init>
      <expr>
        <name>RDEFAULT_QLIST_RS_ENTITYTYPE</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryContainedEntitiesXY</name>
  <parameter_list>( 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RBox</name>&amp;</type>
      <name>box</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>querySelectedEntities</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RObject</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryObject</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RObject</name>::
        <name>Id</name></name>
      </type>
      <name>objectId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RObject</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryObjectDirect</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RObject</name>::
        <name>Id</name></name>
      </type>
      <name>objectId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RObject</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryObjectByHandle</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RObject</name>::
        <name>Handle</name></name>
      </type>
      <name>objectHandle</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>REntity</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryEntity</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>REntity</name>::
        <name>Id</name></name>
      </type>
      <name>entityId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>REntity</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryEntityDirect</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>REntity</name>::
        <name>Id</name></name>
      </type>
      <name>entityId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RUcs</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryUcs</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RUcs</name>::
        <name>Id</name></name>
      </type>
      <name>ucsId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RUcs</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryUcs</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>ucsName</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RLayer</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryLayer</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RLayer</name>::
        <name>Id</name></name>
      </type>
      <name>layerId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RLayer</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryLayerDirect</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RLayer</name>::
        <name>Id</name></name>
      </type>
      <name>layerId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RLayer</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryLayer</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>layerName</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RBlock</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryBlock</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RBlock</name>::
        <name>Id</name></name>
      </type>
      <name>blockId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RBlock</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryBlockDirect</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RBlock</name>::
        <name>Id</name></name>
      </type>
      <name>blockId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RBlock</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryBlock</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>blockName</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RView</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryView</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RView</name>::
        <name>Id</name></name>
      </type>
      <name>viewId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RView</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryView</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>viewName</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RLinetype</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryLinetype</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RLinetype</name>::
        <name>Id</name></name>
      </type>
      <name>linetypeId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RLinetype</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryLinetype</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>linetypeName</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>clearSelection</name>
  <parameter_list>( 
  <param>
    <decl>
    <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>*</type>
    <name>affectedEntities</name>=
    <init>
      <expr>
        <name>NULL</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>selectAllEntites</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>*</type>
    <name>affectedEntities</name>=
    <init>
      <expr>
        <name>NULL</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>selectEntity</name>
  <parameter_list>( 
  <param>
    <decl>
      <type>
        <name>
        <name>REntity</name>::
        <name>Id</name></name>
      </type>
      <name>entityId</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>add</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>, 
  <param>
    <decl>
    <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>*</type>
    <name>affectedEntities</name>=
    <init>
      <expr>
        <name>NULL</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>deselectEntity</name>
  <parameter_list>( 
  <param>
    <decl>
      <type>
        <name>
        <name>REntity</name>::
        <name>Id</name></name>
      </type>
      <name>entityId</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>*</type>
    <name>affectedEntities</name>=
    <init>
      <expr>
        <name>NULL</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>selectEntities</name>
  <parameter_list>( 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QSet
      <argument_list>&lt;
      <argument>
        <name>
        <name>REntity</name>::
        <name>Id</name></name>
      </argument>&gt;</argument_list></name>&amp;</type>
      <name>entityId</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>add</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>, 
  <param>
    <decl>
    <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>*</type>
    <name>affectedEntities</name>=
    <init>
      <expr>
        <name>NULL</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>deselectEntities</name>
  <parameter_list>( 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QSet
      <argument_list>&lt;
      <argument>
        <name>
        <name>REntity</name>::
        <name>Id</name></name>
      </argument>&gt;</argument_list></name>&amp;</type>
      <name>entityId</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>*</type>
    <name>affectedEntities</name>=
    <init>
      <expr>
        <name>NULL</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>isSelected</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>REntity</name>::
        <name>Id</name></name>
      </type>
      <name>entityId</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>isLayerLocked</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RLayer</name>::
        <name>Id</name></name>
      </type>
      <name>layerId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>isEntityEditable</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>REntity</name>::
        <name>Id</name></name>
      </type>
      <name>entityId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <comment type="line">//bool isEntityLayerLocked(REntity::Id
  entityId) const;</comment>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>isLayerFrozen</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RLayer</name>::
        <name>Id</name></name>
      </type>
      <name>layerId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>isBlockFrozen</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RBlock</name>::
        <name>Id</name></name>
      </type>
      <name>blockId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>isEntityLayerFrozen</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>REntity</name>::
        <name>Id</name></name>
      </type>
      <name>entityId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>hasSelection</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>RBox</name>
  </type>
  <name>getBoundingBox</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>ignoreHiddenLayers</name>=
    <init>
      <expr>
        <name>true</name>
      </expr>
    </init></decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>ignoreEmpty</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>RBox</name>
  </type>
  <name>getSelectionBox</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <comment type="line">//void addToSpatialIndex(RObject&amp;
  object, bool isNew = false);</comment>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>rebuildSpatialIndex</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <comment type="line">//void
  addToSpatialIndex(QSharedPointer&lt;REntity&gt;
  entity);</comment>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>addToSpatialIndex</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>QSharedPointer
        <argument_list>&lt;
        <argument>
          <name>REntity</name>
        </argument>&gt;</argument_list></name>
      </type>
      <name>entity</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>blockContainsReferences</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RBlock</name>::
        <name>Id</name></name>
      </type>
      <name>blockId</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>
        <name>RBlock</name>::
        <name>Id</name></name>
      </type>
      <name>referencedBlockId</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>removeBlockFromSpatialIndex</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RBlock</name>::
        <name>Id</name></name>
      </type>
      <name>blockId</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>addBlockToSpatialIndex</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RBlock</name>::
        <name>Id</name></name>
      </type>
      <name>blockId</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>
        <name>RObject</name>::
        <name>Id</name></name>
      </type>
      <name>ignoreBlockId</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>removeFromSpatialIndex</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>QSharedPointer
        <argument_list>&lt;
        <argument>
          <name>REntity</name>
        </argument>&gt;</argument_list></name>
      </type>
      <name>entity</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <comment type="line">//virtual void
  removeFromSpatialIndex2(QSharedPointer&lt;REntity&gt;
  entity);</comment>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>updateAllEntities</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>RTransaction</name>
  </type>
  <name>undo</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>RTransaction</name>
  </type>
  <name>redo</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>isUndoAvailable</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>isRedoAvailable</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>resetTransactionStack</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setFileName</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>fn</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QString</name>
  </type>
  <name>getFileName</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setFileVersion</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>fv</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QString</name>
  </type>
  <name>getFileVersion</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RLayer</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryCurrentLayer</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setCurrentLayer</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RLayer</name>::
        <name>Id</name></name>
      </type>
      <name>layerId</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setCurrentLayer</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>layerName</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>
    <name>RLayer</name>::
    <name>Id</name></name>
  </type>
  <name>getCurrentLayerId</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setCurrentColor</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RColor</name>&amp;</type>
      <name>color</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>RColor</name>
  </type>
  <name>getCurrentColor</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setCurrentLineweight</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RLineweight</name>::
        <name>Lineweight</name></name>
      </type>
      <name>lw</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>
    <name>RLineweight</name>::
    <name>Lineweight</name></name>
  </type>
  <name>getCurrentLineweight</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setCurrentLinetype</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>RLinetype</name>
      </type>
      <name>lt</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>RLinetype</name>
  </type>
  <name>getCurrentLinetype</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RBlock</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryCurrentBlock</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setCurrentBlock</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RBlock</name>::
        <name>Id</name></name>
      </type>
      <name>blockId</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setCurrentBlock</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>blockName</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>
    <name>RBlock</name>::
    <name>Id</name></name>
  </type>
  <name>getCurrentBlockId</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RView</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryCurrentView</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setCurrentView</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RView</name>::
        <name>Id</name></name>
      </type>
      <name>viewId</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setCurrentView</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>viewName</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>
    <name>RView</name>::
    <name>Id</name></name>
  </type>
  <name>getCurrentViewId</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QString</name>
  </type>
  <name>getTempBlockName</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QString</name>
  </type>
  <name>getBlockName</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RBlock</name>::
        <name>Id</name></name>
      </type>
      <name>blockId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>QString</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getBlockNames</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QString</name>
  </type>
  <name>getLayerName</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RLayer</name>::
        <name>Id</name></name>
      </type>
      <name>layerId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>QString</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getLayerNames</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>QString</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getViewNames</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>hasLayer</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>layerName</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>hasBlock</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>blockName</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>hasView</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>viewName</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>hasLinetype</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>linetypeName</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>
    <name>RLayer</name>::
    <name>Id</name></name>
  </type>
  <name>getLayerId</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>layerName</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>
    <name>RBlock</name>::
    <name>Id</name></name>
  </type>
  <name>getBlockId</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>blockName</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>
    <name>RBlock</name>::
    <name>Id</name></name>
  </type>
  <name>getModelSpaceBlockId</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>
    <name>RLinetype</name>::
    <name>Id</name></name>
  </type>
  <name>getLinetypeId</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>linetypeName</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function>
    <type>
      <name>
      <name>RLinetype</name>::
      <name>Id</name></name>
    </type>
    <name>getLinetypeByLayerId</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>linetypeByLayerId</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>
      <name>RLinetype</name>::
      <name>Id</name></name>
    </type>
    <name>getLinetypeByBlockId</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>linetypeByBlockId</name>
    </expr>;</return>}</block>
  </function>
  <function_decl>
  <type>
    <name>QString</name>
  </type>
  <name>getLinetypeName</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RLinetype</name>::
        <name>Id</name></name>
      </type>
      <name>linetypeId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>QString</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getLinetypeNames</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>isByLayer</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RLinetype</name>::
        <name>Id</name></name>
      </type>
      <name>linetypeId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>isByBlock</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RLinetype</name>::
        <name>Id</name></name>
      </type>
      <name>linetypeId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>
    <name>RLineweight</name>::
    <name>Lineweight</name></name>
  </type>
  <name>getMaxLineweight</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QStringList</name>
  </type>
  <name>getVariables</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setVariable</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>key</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QVariant</name>&amp;</type>
      <name>value</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>overwrite</name>=
    <init>
      <expr>
        <name>true</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QVariant</name>
  </type>
  <name>getVariable</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>key</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
    <name>const</name>
    <name>QVariant</name>&amp;</type>
    <name>defaultValue</name>=
    <init>
      <expr>
        <name>RDEFAULT_QVARIANT</name>
      </expr>
    </init></decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>useSettings</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>hasVariable</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>key</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setKnownVariable</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RS</name>::
        <name>KnownVariable</name></name>
      </type>
      <name>key</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QVariant</name>&amp;</type>
      <name>value</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setKnownVariable</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RS</name>::
        <name>KnownVariable</name></name>
      </type>
      <name>key</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>value</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QVariant</name>
  </type>
  <name>getKnownVariable</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RS</name>::
        <name>KnownVariable</name></name>
      </type>
      <name>key</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
    <name>const</name>
    <name>QVariant</name>&amp;</type>
    <name>defaultValue</name>=
    <init>
      <expr>
        <name>RDEFAULT_QVARIANT</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setUnit</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RS</name>::
        <name>Unit</name></name>
      </type>
      <name>unit</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>
    <name>RS</name>::
    <name>Unit</name></name>
  </type>
  <name>getUnit</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setDimensionFont</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>f</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QString</name>
  </type>
  <name>getDimensionFont</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setLinetypeScale</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>v</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getLinetypeScale</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>
    <name>RS</name>::
    <name>LinearFormat</name></name>
  </type>
  <name>getLinearFormat</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>int</name>
  </type>
  <name>getLinearPrecision</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>showLeadingZeroes</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>showTrailingZeroes</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>showLeadingZeroesAngle</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>showTrailingZeroesAngle</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>
    <name>RS</name>::
    <name>AngleFormat</name></name>
  </type>
  <name>getAngleFormat</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>int</name>
  </type>
  <name>getAnglePrecision</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>isModified</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setModified</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>m</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <comment type="block">/* void copyToDocument(const RVector&amp;
  reference, RDocument&amp; other, bool selectionOnly, bool clear,
  RTransaction&amp; transaction); void copyToDocument(REntity&amp;
  entity, const RVector&amp; reference, RDocument&amp; other,
  RTransaction&amp; transaction); */</comment>
  <function_decl>
  <type>
  <name>static</name>
  <name>RDocument</name>&amp;</type>
  <name>getClipboard</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <comment type="block">/** * \nonscriptable */</comment>
  <function_decl>
  <type>
    <name>friend</name>
    <name>QDebug</name>
  </type>
  <name>operator&lt;&lt;</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>QDebug</name>
      </type>
      <name>dbg</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>RDocument</name>&amp;</type>
      <name>d</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>dump</name>
  <parameter_list>()</parameter_list>;</function_decl></public>
  <protected>protected: 
  <decl_stmt>
  <decl>
    <type>
    <name>static</name>
    <name>RDocument</name>*</type>
    <name>clipboard</name>
  </decl>;</decl_stmt></protected>
  <private>private: 
  <decl_stmt>
  <decl>
    <type>
      <name>QString</name>
    </type>
    <name>fileName</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QString</name>
    </type>
    <name>fileVersion</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
    <name>RStorage</name>&amp;</type>
    <name>storage</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
    <name>RSpatialIndex</name>&amp;</type>
    <name>spatialIndex</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>RTransactionStack</name>
    </type>
    <name>transactionStack</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>
      <name>RBlock</name>::
      <name>Id</name></name>
    </type>
    <name>modelSpaceBlockId</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>
      <name>RLinetype</name>::
      <name>Id</name></name>
    </type>
    <name>linetypeByLayerId</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>
      <name>RLinetype</name>::
      <name>Id</name></name>
    </type>
    <name>linetypeByBlockId</name>
  </decl>;</decl_stmt></private>}</block>;</class>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RDocument*</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>const RDocument*</argument>)</argument_list>
  </macro>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
