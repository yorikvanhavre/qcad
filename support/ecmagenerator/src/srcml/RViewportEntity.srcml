<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src"
xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++"
dir="./core" filename="RViewportEntity.h">
  <comment type="block">/** * Copyright (c) 2011-2013 by Andrew
  Mustun. All rights reserved. * * This file is part of the QCAD
  project. * * QCAD is free software: you can redistribute it
  and/or modify * it under the terms of the GNU General Public
  License as published by * the Free Software Foundation, either
  version 3 of the License, or * (at your option) any later
  version. * * QCAD is distributed in the hope that it will be
  useful, * but WITHOUT ANY WARRANTY; without even the implied
  warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE. See the * GNU General Public License for more details. *
  * You should have received a copy of the GNU General Public
  License * along with QCAD. */</comment>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>RVIEWPORTENTITY_H</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <name>RVIEWPORTENTITY_H</name></cpp:define>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"entity_global.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"REntity.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RViewportData.h"</cpp:file></cpp:include>
  <class_decl>class 
  <name>RDocument</name>;</class_decl>
  <class_decl>class 
  <name>RExporter</name>;</class_decl>
  <comment type="block">/** * Viewport entity. * * \scriptable *
  \sharedPointerSupport * \ingroup core */</comment>
  <class>class 
  <macro>
    <name>QCADCORE_EXPORT</name>
  </macro>
  <name>RViewportEntity</name>
  <super>: 
  <specifier>public</specifier>
  <name>REntity</name></super>
  <block>{
  <private type="default"></private>
  <public>public: 
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyCustom</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyHandle</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyType</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyBlock</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyLayer</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyLinetype</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyLineweight</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyColor</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyDrawOrder</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyCenterX</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyCenterY</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyCenterZ</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyWidth</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyHeight</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyScale</name>
  </decl>;</decl_stmt></public>
  <public>public: 
  <constructor_decl>
  <name>RViewportEntity</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>RDocument</name>*</type>
      <name>document</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RViewportData</name>&amp;</type>
      <name>data</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>
      <name>RObject</name>::
      <name>Id</name></name>
    </type>
    <name>objectId</name>=
    <init>
      <expr>
        <name>
        <name>RObject</name>::
        <name>INVALID_ID</name></name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</constructor_decl>
  <destructor_decl>
  <specifier>virtual</specifier>
  <name>~RViewportEntity</name>
  <parameter_list>()</parameter_list>;</destructor_decl>
  <function_decl>
  <type>
    <name>static</name>
    <name>void</name>
  </type>
  <name>init</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function>
    <type>
      <name>static</name>
      <name>QSet
      <argument_list>&lt;
      <argument>
        <name>RPropertyTypeId</name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>getStaticPropertyTypeIds</name>
    <parameter_list>()</parameter_list>
    <block>{ 
    <return>return 
    <expr>
      <call>
        <name>
        <name>RPropertyTypeId</name>::
        <name>getPropertyTypeIds</name></name>
        <argument_list>(
        <argument>
          <expr>
            <call>
              <name>typeid</name>
              <argument_list>(
              <argument>
                <expr>
                  <name>RViewportEntity</name>
                </expr>
              </argument>)</argument_list>
            </call>
          </expr>
        </argument>)</argument_list>
      </call>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
    <name>virtual</name>
    <name>RViewportEntity</name>*</type>
    <name>clone</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>new 
    <call>
      <name>RViewportEntity</name>
      <argument_list>(
      <argument>
        <expr>*
        <name>this</name></expr>
      </argument>)</argument_list>
    </call></expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>virtual</name>
      <name>
      <name>RS</name>::
      <name>EntityType</name></name>
    </type>
    <name>getType</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>
      <name>RS</name>::
      <name>EntityViewport</name></name>
    </expr>;</return>}</block>
  </function>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>setProperty</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>RPropertyTypeId</name>
      </type>
      <name>propertyTypeId</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QVariant</name>&amp;</type>
      <name>value</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
    <name>RTransaction</name>*</type>
    <name>transaction</name>=
    <init>
      <expr>
        <name>NULL</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QPair
    <argument_list>&lt;
    <argument>
      <name>QVariant</name>
    </argument>, 
    <argument>
      <name>RPropertyAttributes</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getProperty</name>
  <parameter_list>( 
  <param>
    <decl>
      <type>
      <name>RPropertyTypeId</name>&amp;</type>
      <name>propertyTypeId</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>humanReadable</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>noAttributes</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>exportEntity</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>RExporter</name>&amp;</type>
      <name>e</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>preview</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function>
    <type>
    <name>virtual</name>
    <name>RViewportData</name>&amp;</type>
    <name>getData</name>
    <parameter_list>()</parameter_list>
    <block>{ 
    <return>return 
    <expr>
      <name>data</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
    <name>virtual</name>
    <name>const</name>
    <name>RViewportData</name>&amp;</type>
    <name>getData</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>data</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>RVector</name>
    </type>
    <name>getCenter</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
    <name>data</name>.
    <call>
      <name>getCenter</name>
      <argument_list>()</argument_list>
    </call></expr>;</return>}</block>
  </function></public>
  <protected>protected: 
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>print</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>QDebug</name>
      </type>
      <name>dbg</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl></protected>
  <protected>protected: 
  <decl_stmt>
  <decl>
    <type>
      <name>RViewportData</name>
    </type>
    <name>data</name>
  </decl>;</decl_stmt></protected>}</block>;</class>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RViewportEntity*</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>
    QSharedPointer&lt;RViewportEntity&gt;</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>
    QSharedPointer&lt;RViewportEntity&gt;*</argument>)</argument_list>
  </macro>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
