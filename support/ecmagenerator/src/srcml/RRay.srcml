<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src"
xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++"
dir="./core/math" filename="RRay.h">
  <comment type="block">/** * Copyright (c) 2011-2014 by Andrew
  Mustun. All rights reserved. * * This file is part of the QCAD
  project. * * QCAD is free software: you can redistribute it
  and/or modify * it under the terms of the GNU General Public
  License as published by * the Free Software Foundation, either
  version 3 of the License, or * (at your option) any later
  version. * * QCAD is distributed in the hope that it will be
  useful, * but WITHOUT ANY WARRANTY; without even the implied
  warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE. See the * GNU General Public License for more details. *
  * You should have received a copy of the GNU General Public
  License * along with QCAD. */</comment>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>RRAY_H</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <name>RRAY_H</name></cpp:define>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"../core_global.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RXLine.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RS.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RShape.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RVector.h"</cpp:file></cpp:include>
  <class_decl>class 
  <name>RBox</name>;</class_decl>
  <class_decl>class 
  <name>RPolyline</name>;</class_decl>
  <comment type="block">/** * Low-level mathematical representation
  of a ray. * * \ingroup math * \scriptable * \sharedPointerSupport
  * \copyable * \hasStreamOperator */</comment>
  <class>class 
  <macro>
    <name>QCADCORE_EXPORT</name>
  </macro>
  <name>RRay</name>
  <super>: 
  <specifier>public</specifier>
  <name>RXLine</name></super>
  <block>{
  <private type="default"></private>
  <public>public: 
  <constructor_decl>
  <name>RRay</name>
  <parameter_list>()</parameter_list>;</constructor_decl>
  <constructor_decl>
  <name>RRay</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RLine</name>&amp;</type>
      <name>line</name>
    </decl>
  </param>)</parameter_list>;</constructor_decl>
  <constructor_decl>
  <name>RRay</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>basePoint</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>directionVector</name>
    </decl>
  </param>)</parameter_list>;</constructor_decl>
  <constructor_decl>
  <name>RRay</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>basePoint</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>angle</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>distance</name>
    </decl>
  </param>)</parameter_list>;</constructor_decl>
  <destructor_decl>
  <specifier>virtual</specifier>
  <name>~RRay</name>
  <parameter_list>()</parameter_list>;</destructor_decl>
  <function>
    <type>
    <name>virtual</name>
    <name>RRay</name>*</type>
    <name>clone</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>new 
    <call>
      <name>RRay</name>
      <argument_list>(
      <argument>
        <expr>*
        <name>this</name></expr>
      </argument>)</argument_list>
    </call></expr>;</return>}</block>
  </function>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>trimEndPoint</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>p</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QList
    <argument_list>&lt;
    <argument>
      <name>RVector</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getPointsWithDistanceToEnd</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>distance</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>
        <name>RS</name>::
        <name>From</name></name>
      </type>
      <name>from</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>reverse</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>RLine</name>
  </type>
  <name>getClippedLine</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RBox</name>&amp;</type>
      <name>box</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>RVector</name>
  </type>
  <name>getVectorTo</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>point</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>limited</name>=
    <init>
      <expr>
        <name>true</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>stretch</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RPolyline</name>&amp;</type>
      <name>area</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>offset</name>
    </decl>
  </param>)</parameter_list>;</function_decl></public>
  <protected>protected: 
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>print</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>QDebug</name>
      </type>
      <name>dbg</name>
    </decl>
  </param>)</parameter_list>
  <specifier>
  const</specifier>;</function_decl></protected>}</block>;</class>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>const RRay*</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RRay*</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RRay</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>
    QSharedPointer&lt;RRay&gt;</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>
    QSharedPointer&lt;RRay&gt;*</argument>)</argument_list>
  </macro>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
