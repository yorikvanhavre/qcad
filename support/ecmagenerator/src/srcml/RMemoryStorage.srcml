<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src"
xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++"
dir="./core" filename="RMemoryStorage.h">
  <comment type="block">/** * Copyright (c) 2011-2013 by Andrew
  Mustun. All rights reserved. * * This file is part of the QCAD
  project. * * QCAD is free software: you can redistribute it
  and/or modify * it under the terms of the GNU General Public
  License as published by * the Free Software Foundation, either
  version 3 of the License, or * (at your option) any later
  version. * * QCAD is distributed in the hope that it will be
  useful, * but WITHOUT ANY WARRANTY; without even the implied
  warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE. See the * GNU General Public License for more details. *
  * You should have received a copy of the GNU General Public
  License * along with QCAD. */</comment>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>RMEMORYSTORAGE_H_</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <name>RMEMORYSTORAGE_H_</name></cpp:define>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"core_global.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QSharedPointer&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RStorage.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RBlockReferenceEntity.h"</cpp:file></cpp:include>
  <comment type="block">/** * Basic memory based storage. * *
  \ingroup core * \scriptable */</comment>
  <class>class 
  <macro>
    <name>QCADCORE_EXPORT</name>
  </macro>
  <name>RMemoryStorage</name>
  <super>: 
  <specifier>public</specifier>
  <name>RStorage</name></super>
  <block>{
  <private type="default"></private>
  <public>public: 
  <constructor_decl>
  <name>RMemoryStorage</name>
  <parameter_list>()</parameter_list>;</constructor_decl>
  <destructor_decl>
  <specifier>virtual</specifier>
  <name>~RMemoryStorage</name>
  <parameter_list>()</parameter_list>;</destructor_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>clear</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>setCurrentBlock</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RBlock</name>::
        <name>Id</name></name>
      </type>
      <name>blockId</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>beginTransaction</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>commitTransaction</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>rollbackTransaction</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <comment type="line">//virtual QList&lt;REntity::Id&gt;
  orderBackToFront(const QSet&lt;REntity::Id&gt;&amp;
  entityIds);</comment>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>RObject</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryAllObjects</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryAllEntities</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>undone</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>allBlocks</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>
      <name>RS</name>::
      <name>EntityType</name></name>
    </type>
    <name>type</name>=
    <init>
      <expr>
        <name>
        <name>RS</name>::
        <name>EntityAll</name></name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>RUcs</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryAllUcs</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>RLayer</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryAllLayers</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>undone</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>RBlock</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryAllBlocks</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>undone</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>RView</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryAllViews</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>undone</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>RLinetype</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryAllLinetypes</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryInfiniteEntities</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>querySelectedEntities</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryLayerEntities</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RLayer</name>::
        <name>Id</name></name>
      </type>
      <name>layerId</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>allBlocks</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryBlockEntities</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RBlock</name>::
        <name>Id</name></name>
      </type>
      <name>blockId</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryChildEntities</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>REntity</name>::
        <name>Id</name></name>
      </type>
      <name>parentId</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>
      <name>RS</name>::
      <name>EntityType</name></name>
    </type>
    <name>type</name>=
    <init>
      <expr>
        <name>
        <name>RS</name>::
        <name>EntityAll</name></name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>hasChildEntities</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>REntity</name>::
        <name>Id</name></name>
      </type>
      <name>parentId</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryBlockReferences</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RBlock</name>::
        <name>Id</name></name>
      </type>
      <name>blockId</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryAllBlockReferences</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <comment type="line">//virtual QSet&lt;REntity::Id&gt;
  queryViewEntities(RView::Id viewId);</comment>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RObject</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryObject</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RObject</name>::
        <name>Id</name></name>
      </type>
      <name>objectId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RObject</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryObjectByHandle</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RObject</name>::
        <name>Handle</name></name>
      </type>
      <name>objectHandle</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RObject</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryObjectByHandleDirect</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RObject</name>::
        <name>Handle</name></name>
      </type>
      <name>objectHandle</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>REntity</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryEntity</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>REntity</name>::
        <name>Id</name></name>
      </type>
      <name>objectId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RLayer</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryLayer</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RLayer</name>::
        <name>Id</name></name>
      </type>
      <name>layerId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RLayer</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryLayer</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>layerName</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RBlock</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryBlock</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RBlock</name>::
        <name>Id</name></name>
      </type>
      <name>blockId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RBlock</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryBlock</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>blockName</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RView</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryView</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RView</name>::
        <name>Id</name></name>
      </type>
      <name>viewId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RView</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryView</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>viewName</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RUcs</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryUcs</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RUcs</name>::
        <name>Id</name></name>
      </type>
      <name>ucsId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RUcs</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryUcs</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>ucsName</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RLinetype</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryLinetype</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RLinetype</name>::
        <name>Id</name></name>
      </type>
      <name>linetypeId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RLinetype</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryLinetype</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>linetypeName</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>clearEntitySelection</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>*</type>
    <name>affectedEntities</name>=
    <init>
      <expr>
        <name>NULL</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>selectAllEntites</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>*</type>
    <name>affectedEntities</name>=
    <init>
      <expr>
        <name>NULL</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>selectEntity</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>REntity</name>::
        <name>Id</name></name>
      </type>
      <name>entityId</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>add</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>, 
  <param>
    <decl>
    <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>*</type>
    <name>affectedEntities</name>=
    <init>
      <expr>
        <name>NULL</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>deselectEntity</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>REntity</name>::
        <name>Id</name></name>
      </type>
      <name>entityId</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>*</type>
    <name>affectedEntities</name>=
    <init>
      <expr>
        <name>NULL</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>selectEntities</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QSet
      <argument_list>&lt;
      <argument>
        <name>
        <name>REntity</name>::
        <name>Id</name></name>
      </argument>&gt;</argument_list></name>&amp;</type>
      <name>entityIds</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>add</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>, 
  <param>
    <decl>
    <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>*</type>
    <name>affectedEntities</name>=
    <init>
      <expr>
        <name>NULL</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>deselectEntities</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QSet
      <argument_list>&lt;
      <argument>
        <name>
        <name>REntity</name>::
        <name>Id</name></name>
      </argument>&gt;</argument_list></name>&amp;</type>
      <name>entityIds</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>*</type>
    <name>affectedEntities</name>=
    <init>
      <expr>
        <name>NULL</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setEntitySelected</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>QSharedPointer
        <argument_list>&lt;
        <argument>
          <name>REntity</name>
        </argument>&gt;</argument_list></name>
      </type>
      <name>entity</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>on</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>
      <name>REntity</name>::
      <name>Id</name></name>
    </argument>&gt;</argument_list></name>*</type>
    <name>affectedEntities</name>=
    <init>
      <expr>
        <name>NULL</name>
      </expr>
    </init></decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>onlyDescend</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>isSelected</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>REntity</name>::
        <name>Id</name></name>
      </type>
      <name>entityId</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>hasSelection</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>RBox</name>
  </type>
  <name>getBoundingBox</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>ignoreHiddenLayers</name>=
    <init>
      <expr>
        <name>true</name>
      </expr>
    </init></decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>ignoreEmpty</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>RBox</name>
  </type>
  <name>getSelectionBox</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>removeObject</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>QSharedPointer
        <argument_list>&lt;
        <argument>
          <name>RObject</name>
        </argument>&gt;</argument_list></name>
      </type>
      <name>object</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>saveObject</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>QSharedPointer
        <argument_list>&lt;
        <argument>
          <name>RObject</name>
        </argument>&gt;</argument_list></name>
      </type>
      <name>object</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>checkBlockRecursion</name>=
    <init>
      <expr>
        <name>true</name>
      </expr>
    </init></decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>keepHandles</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>checkRecursion</name>
  <parameter_list>( 
  <param>
    <decl>
      <type>
        <name>
        <name>RBlock</name>::
        <name>Id</name></name>
      </type>
      <name>blockId</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>
        <name>RBlock</name>::
        <name>Id</name></name>
      </type>
      <name>potentialChildBlockId</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>deleteObject</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RObject</name>::
        <name>Id</name></name>
      </type>
      <name>objectId</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>saveTransaction</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>RTransaction</name>&amp;</type>
      <name>transaction</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>deleteTransactionsFrom</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>transactionId</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>RTransaction</name>
  </type>
  <name>getTransaction</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>transactionId</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>resetTransactionStack</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>toggleUndoStatus</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>QSet
      <argument_list>&lt;
      <argument>
        <name>
        <name>RObject</name>::
        <name>Id</name></name>
      </argument>&gt;</argument_list></name>&amp;</type>
      <name>objects</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>toggleUndoStatus</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RObject</name>::
        <name>Id</name></name>
      </type>
      <name>object</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>setUndoStatus</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RObject</name>::
        <name>Id</name></name>
      </type>
      <name>objectId</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>status</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <comment type="line">//virtual bool getUndoStatus(RObject::Id
  objectId) const;</comment>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>int</name>
  </type>
  <name>getMaxTransactionId</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QStringList</name>
  </type>
  <name>getVariables</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>setVariable</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>key</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QVariant</name>&amp;</type>
      <name>value</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>overwrite</name>=
    <init>
      <expr>
        <name>true</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QVariant</name>
  </type>
  <name>getVariable</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>key</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>setKnownVariable</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RS</name>::
        <name>KnownVariable</name></name>
      </type>
      <name>key</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QVariant</name>&amp;</type>
      <name>value</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QVariant</name>
  </type>
  <name>getKnownVariable</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RS</name>::
        <name>KnownVariable</name></name>
      </type>
      <name>key</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QString</name>
  </type>
  <name>getLayerName</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RLayer</name>::
        <name>Id</name></name>
      </type>
      <name>layerId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>QString</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getLayerNames</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>
    <name>RLayer</name>::
    <name>Id</name></name>
  </type>
  <name>getLayerId</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>layerName</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QString</name>
  </type>
  <name>getBlockName</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RBlock</name>::
        <name>Id</name></name>
      </type>
      <name>blockId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>QString</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getBlockNames</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>
    <name>RBlock</name>::
    <name>Id</name></name>
  </type>
  <name>getBlockId</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>blockName</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QString</name>
  </type>
  <name>getViewName</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RView</name>::
        <name>Id</name></name>
      </type>
      <name>viewId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>QString</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getViewNames</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>
    <name>RView</name>::
    <name>Id</name></name>
  </type>
  <name>getViewId</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>viewName</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QString</name>
  </type>
  <name>getLinetypeName</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RLinetype</name>::
        <name>Id</name></name>
      </type>
      <name>linetypeId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>QString</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getLinetypeNames</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>
    <name>RLinetype</name>::
    <name>Id</name></name>
  </type>
  <name>getLinetypeId</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>linetypeName</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RObject</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryObjectDirect</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RObject</name>::
        <name>Id</name></name>
      </type>
      <name>objectId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>REntity</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryEntityDirect</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>REntity</name>::
        <name>Id</name></name>
      </type>
      <name>objectId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RUcs</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryUcsDirect</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RUcs</name>::
        <name>Id</name></name>
      </type>
      <name>ucsId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RLayer</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryLayerDirect</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RLayer</name>::
        <name>Id</name></name>
      </type>
      <name>layerId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QSharedPointer
    <argument_list>&lt;
    <argument>
      <name>RBlock</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>queryBlockDirect</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RBlock</name>::
        <name>Id</name></name>
      </type>
      <name>blockId</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>setLastTransactionId</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>transactionId</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>
    <name>RLineweight</name>::
    <name>Lineweight</name></name>
  </type>
  <name>getMaxLineweight</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>setUnit</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RS</name>::
        <name>Unit</name></name>
      </type>
      <name>unit</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>
    <name>RS</name>::
    <name>Unit</name></name>
  </type>
  <name>getUnit</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>setDimensionFont</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>f</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QString</name>
  </type>
  <name>getDimensionFont</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>setLinetypeScale</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>v</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>double</name>
  </type>
  <name>getLinetypeScale</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl></public>
  <protected>protected: 
  <decl_stmt>
  <decl>
    <type>
      <name>mutable</name>
      <name>RBox</name>
    </type>
    <name>boundingBox</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>mutable</name>
      <name>
      <name>RLineweight</name>::
      <name>Lineweight</name></name>
    </type>
    <name>maxLineweight</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>mutable</name>
      <name>bool</name>
    </type>
    <name>boundingBoxChanged</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>bool</name>
    </type>
    <name>inTransaction</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QHash
      <argument_list>&lt;
      <argument>
        <name>
        <name>RObject</name>::
        <name>Id</name></name>
      </argument>, 
      <argument>
        <name>QSharedPointer
        <argument_list>&lt;
        <argument>
          <name>RObject</name>
        </argument>&gt;</argument_list></name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>objectMap</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QHash
      <argument_list>&lt;
      <argument>
        <name>
        <name>RObject</name>::
        <name>Handle</name></name>
      </argument>, 
      <argument>
        <name>QSharedPointer
        <argument_list>&lt;
        <argument>
          <name>RObject</name>
        </argument>&gt;</argument_list></name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>objectHandleMap</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QHash
      <argument_list>&lt;
      <argument>
        <name>
        <name>REntity</name>::
        <name>Id</name></name>
      </argument>, 
      <argument>
        <name>QSharedPointer
        <argument_list>&lt;
        <argument>
          <name>REntity</name>
        </argument>&gt;</argument_list></name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>entityMap</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QMultiHash
      <argument_list>&lt;
      <argument>
        <name>
        <name>RBlock</name>::
        <name>Id</name></name>
      </argument>, 
      <argument>
        <name>QSharedPointer
        <argument_list>&lt;
        <argument>
          <name>REntity</name>
        </argument>&gt;</argument_list></name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>blockEntityMap</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QHash
      <argument_list>&lt;
      <argument>
        <name>
        <name>RBlock</name>::
        <name>Id</name></name>
      </argument>, 
      <argument>
        <name>QSharedPointer
        <argument_list>&lt;
        <argument>
          <name>RBlock</name>
        </argument>&gt;</argument_list></name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>blockMap</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QHash
      <argument_list>&lt;
      <argument>
        <name>
        <name>RLayer</name>::
        <name>Id</name></name>
      </argument>, 
      <argument>
        <name>QSharedPointer
        <argument_list>&lt;
        <argument>
          <name>RLayer</name>
        </argument>&gt;</argument_list></name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>layerMap</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QHash
      <argument_list>&lt;
      <argument>
        <name>int</name>
      </argument>, 
      <argument>
        <name>RTransaction</name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>transactionMap</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QHash
      <argument_list>&lt;
      <argument>
        <name>QString</name>
      </argument>, 
      <argument>
        <name>QVariant</name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>variables</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QMap
      <argument_list>&lt;
      <argument>
        <name>QString</name>
      </argument>, 
      <argument>
        <name>QString</name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>variableCaseMap</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QHash
      <argument_list>&lt;
      <argument>
        <name>
        <name>RS</name>::
        <name>KnownVariable</name></name>
      </argument>, 
      <argument>
        <name>QVariant</name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>knownVariables</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>
      <name>RS</name>::
      <name>Unit</name></name>
    </type>
    <name>unit</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QString</name>
    </type>
    <name>dimensionFont</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>double</name>
    </type>
    <name>linetypeScale</name>
  </decl>;</decl_stmt></protected>}</block>;</class>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RMemoryStorage*</argument>)</argument_list>
  </macro>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="block">/* RMEMORYSTOARGE_H_ */</comment>
</unit>
