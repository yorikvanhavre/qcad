<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src"
xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++"
dir="./core" filename="RGraphicsView.h">
  <comment type="block">/** * Copyright (c) 2011-2013 by Andrew
  Mustun. All rights reserved. * * This file is part of the QCAD
  project. * * QCAD is free software: you can redistribute it
  and/or modify * it under the terms of the GNU General Public
  License as published by * the Free Software Foundation, either
  version 3 of the License, or * (at your option) any later
  version. * * QCAD is distributed in the hope that it will be
  useful, * but WITHOUT ANY WARRANTY; without even the implied
  warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE. See the * GNU General Public License for more details. *
  * You should have received a copy of the GNU General Public
  License * along with QCAD. */</comment>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>RGRAPHICSVIEW_H</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <name>RGRAPHICSVIEW_H</name></cpp:define>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"core_global.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QKeyEvent&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QCursor&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QSwipeGesture&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QPanGesture&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QPinchGesture&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RExporter.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RGrid.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RNonCopyable.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RTextLabel.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RTerminateEvent.h"</cpp:file></cpp:include>
  <class_decl>class 
  <name>RAction</name>;</class_decl>
  <class_decl>class 
  <name>RDocumentInterface</name>;</class_decl>
  <class_decl>class 
  <name>RGraphicsScene</name>;</class_decl>
  <class_decl>class 
  <name>RLine</name>;</class_decl>
  <class_decl>class 
  <name>RMouseEvent</name>;</class_decl>
  <class_decl>class 
  <name>RTabletEvent</name>;</class_decl>
  <class_decl>class 
  <name>RWheelEvent</name>;</class_decl>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>RDEFAULT_MIN1</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <name>RDEFAULT_MIN1</name>-1</cpp:define>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="block">/** * \brief Graphics view. * * A graphics
  view displays a (part of a) graphics scene. * * \ingroup core *
  \scriptable */</comment>
  <class>class 
  <macro>
    <name>QCADCORE_EXPORT</name>
  </macro>
  <name>RGraphicsView</name>
  <super>: 
  <name>RNonCopyable</name></super>
  <block>{
  <private type="default"></private>
  <public>public: 
  <enum>enum 
  <name>ColorMode</name>
  <block>{ 
  <expr>
    <name>FullColor</name>
  </expr>, 
  <expr>
    <name>GrayScale</name>
  </expr>, 
  <expr>
    <name>BlackWhite</name>
  </expr>}</block>;</enum></public>
  <public>public: 
  <constructor_decl>
  <name>RGraphicsView</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
    <name>RGraphicsScene</name>*</type>
    <name>scene</name>=
    <init>
      <expr>
        <name>NULL</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</constructor_decl>
  <destructor_decl>
  <specifier>virtual</specifier>
  <name>~RGraphicsView</name>
  <parameter_list>()</parameter_list>;</destructor_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setViewportNumber</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>n</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function>
    <type>
      <name>int</name>
    </type>
    <name>getViewportNumber</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>viewportNumber</name>
    </expr>;</return>}</block>
  </function>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>clearCaches</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setDisplayOnlyCurrentUcs</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>on</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>setScene</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>RGraphicsScene</name>*</type>
      <name>scene</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>regen</name>=
    <init>
      <expr>
        <name>true</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
  <name>RGraphicsScene</name>*</type>
  <name>getScene</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
  <name>RDocument</name>*</type>
  <name>getDocument</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
  <name>RDocumentInterface</name>*</type>
  <name>getDocumentInterface</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <comment type="block">/** * Maps the given view coordinate in
  pixels to a model coordinate. * * \param v view coordinate in
  pixels, v.z is always 0 * \param z known z coordinate in model
  units */</comment>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>RVector</name>
  </type>
  <name>mapFromView</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>v</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>double</name>
    </type>
    <name>z</name>=
    <init>
      <expr>0.0</expr>
    </init></decl>
  </param>)</parameter_list>
  <specifier>const</specifier>
  <specifier>= 0</specifier>;</function_decl>
  <comment type="block">/** * Maps the given model coordinate to a
  view coordinate in pixels. */</comment>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>RVector</name>
  </type>
  <name>mapToView</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>v</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>
  <specifier>= 0</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>RBox</name>
  </type>
  <name>mapToView</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RBox</name>&amp;</type>
      <name>box</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <comment type="block">/** * Maps the given view distance in
  pixels to a model distance. * If the view projection is not
  orthogonal the result is undefined. */</comment>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>double</name>
  </type>
  <name>mapDistanceFromView</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>d</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>
  <specifier>= 0</specifier>;</function_decl>
  <comment type="block">/** * Maps the given model distance to a
  screen distance in pixels. * If the view projection is not
  orthogonal the result is undefined. */</comment>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>double</name>
  </type>
  <name>mapDistanceToView</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>d</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>
  <specifier>= 0</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QList
    <argument_list>&lt;
    <argument>
      <name>RVector</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>mapCornersFromView</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>RBox</name>
  </type>
  <name>getBox</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>RVector</name>
  </type>
  <name>getMinimum</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>RVector</name>
  </type>
  <name>getMaximum</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>handleTerminateEvent</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>RTerminateEvent</name>&amp;</type>
      <name>event</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>handleKeyPressEvent</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>QKeyEvent</name>&amp;</type>
      <name>event</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>handleKeyReleaseEvent</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>QKeyEvent</name>&amp;</type>
      <name>event</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>simulateMouseMoveEvent</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>handleMouseMoveEvent</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>RMouseEvent</name>&amp;</type>
      <name>event</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>handleMousePressEvent</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>RMouseEvent</name>&amp;</type>
      <name>event</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>handleMouseReleaseEvent</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>RMouseEvent</name>&amp;</type>
      <name>event</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>handleMouseDoubleClickEvent</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>RMouseEvent</name>&amp;</type>
      <name>event</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>handleWheelEvent</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>RWheelEvent</name>&amp;</type>
      <name>event</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>handleTabletEvent</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>RTabletEvent</name>&amp;</type>
      <name>event</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>handleSwipeGestureEvent</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>QSwipeGesture</name>&amp;</type>
      <name>gesture</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>handlePanGestureEvent</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>QPanGesture</name>&amp;</type>
      <name>gesture</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>handlePinchGestureEvent</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>QPinchGesture</name>&amp;</type>
      <name>gesture</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <comment type="block">/** * \return True if this view currently
  has the focus. */</comment>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>hasFocus</name>
  <parameter_list>()</parameter_list>
  <specifier>= 0</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>removeFocus</name>
  <parameter_list>()</parameter_list>
  <specifier>= 0</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>viewportChangeEvent</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>saveViewport</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>restoreViewport</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>zoomIn</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>zoomOut</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>zoomIn</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>center</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>zoomOut</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>center</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>zoom</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>center</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>factor</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>zoomTo</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RBox</name>&amp;</type>
      <name>window</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>int</name>
    </type>
    <name>margin</name>=
    <init>
      <expr>0</expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>zoomPrevious</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>autoZoom</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
      <name>int</name>
    </type>
    <name>margin</name>=
    <init>
      <expr>
        <name>RDEFAULT_MIN1</name>
      </expr>
    </init></decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>ignoreEmpty</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>zoomToSelection</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>centerToPoint</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>point</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>centerToBox</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RBox</name>&amp;</type>
      <name>box</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>pan</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>delta</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>regen</name>=
    <init>
      <expr>
        <name>true</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>startPan</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getFactor</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>includeStepFactor</name>=
    <init>
      <expr>
        <name>true</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setFactor</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>f</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>regen</name>=
    <init>
      <expr>
        <name>true</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>RVector</name>
  </type>
  <name>getOffset</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>includeStepOffset</name>=
    <init>
      <expr>
        <name>true</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setOffset</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>offset</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>regen</name>=
    <init>
      <expr>
        <name>true</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <comment type="block">/** * Regenerates the view to show the
  visible parts of the underlying scene. * This function is called
  after the entities have been modified or * the view port changed
  after a zoom or pan or after the window * has been resized. * *
  \param force True if scene has changed, don't use any
  optimizations, force regeneration. */</comment>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>regenerate</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>force</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>
  <specifier>= 0</specifier>;</function_decl>
  <comment type="block">/** * Repaints the view (widget, etc..).
  This differs from regenerate in that * it does not require the
  view to iterate through the scene elements. Instead * for example
  a buffered bitmap might be drawn. * This is for example called
  when the preview changes to restore the view * before painting
  the preview on top of it. */</comment>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>repaintView</name>
  <parameter_list>()</parameter_list>
  <specifier>= 0</specifier>;</function_decl>
  <comment type="block">/** * \return Width of the view in pixels.
  */</comment>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>int</name>
  </type>
  <name>getWidth</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>
  <specifier>= 0</specifier>;</function_decl>
  <comment type="block">/** * \return Height of the view in pixels.
  */</comment>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>int</name>
  </type>
  <name>getHeight</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>
  <specifier>= 0</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setNavigationAction</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>RAction</name>*</type>
      <name>action</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <comment type="block">/** * \return Current grid or NULL if no
  grid is set. */</comment>
  <function>
    <type>
    <name>RGrid</name>*</type>
    <name>getGrid</name>
    <parameter_list>()</parameter_list>
    <block>{ 
    <return>return 
    <expr>
      <name>grid</name>
    </expr>;</return>}</block>
  </function>
  <comment type="block">/** * Sets the current grid. This graphics
  view takes ownership * of the grid. The previous grid is deleted.
  Setting the grid * to NULL disables the grid. */</comment>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setGrid</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>RGrid</name>*</type>
        <name>g</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <if>if 
    <condition>(
    <expr>
    <name>grid</name>!=
    <name>NULL</name></expr>)</condition>
    <then>
      <block>{ 
      <expr_stmt>
      <expr>delete 
      <name>grid</name></expr>;</expr_stmt>
      <expr_stmt>
      <expr>
      <name>grid</name>= 
      <name>NULL</name></expr>;</expr_stmt>}</block>
    </then></if>
    <expr_stmt>
    <expr>
    <name>grid</name>= 
    <name>g</name></expr>;</expr_stmt>}</block>
  </function>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setGridVisible</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>on</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>isGridVisible</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function>
    <type>
      <name>virtual</name>
      <name>void</name>
    </type>
    <name>paintGridPoint</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>RVector</name>&amp;</type>
      </decl>
    </param>
    <comment type="block">
    /*ucsPosition*/</comment>)</parameter_list>
    <block>{}</block>
  </function>
  <function>
    <type>
      <name>virtual</name>
      <name>void</name>
    </type>
    <name>paintGridLine</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>RLine</name>&amp;</type>
      </decl>
    </param>
    <comment type="block">
    /*ucsPosition*/</comment>)</parameter_list>
    <block>{}</block>
  </function>
  <function>
    <type>
      <name>virtual</name>
      <name>QCursor</name>
    </type>
    <name>getCursor</name>
    <parameter_list>()</parameter_list>
    <block>{ 
    <return>return 
    <expr>
      <call>
        <name>QCursor</name>
        <argument_list>(
        <argument>
          <expr>
            <name>
            <name>Qt</name>::
            <name>ArrowCursor</name></name>
          </expr>
        </argument>)</argument_list>
      </call>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>virtual</name>
      <name>void</name>
    </type>
    <name>setCursor</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>
          <name>Qt</name>::
          <name>CursorShape</name></name>
        </type>
      </decl>
    </param>
    <comment type="block">
    /*cursorShape*/</comment>)</parameter_list>
    <block>{}</block>
  </function>
  <function>
    <type>
      <name>virtual</name>
      <name>void</name>
    </type>
    <name>setCursor</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>QCursor</name>&amp;</type>
      </decl>
    </param>
    <comment type="block">/*cursor*/</comment>)</parameter_list>
    <block>{}</block>
  </function>
  <function_decl>
  <type>
    <name>RVector</name>
  </type>
  <name>getClosestReferencePoint</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>screenPosition</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>range</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>RVector</name>
  </type>
  <name>getClosestReferencePoint</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>REntity</name>::
        <name>Id</name></name>
      </type>
      <name>entityId</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>screenPosition</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>
    <name>REntity</name>::
    <name>Id</name></name>
  </type>
  <name>getClosestEntity</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>screenPosition</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>range</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>includeLockedLayers</name>=
    <init>
      <expr>
        <name>true</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <comment type="line">//REntity::Id getClosestEntityInUcs(const
  RVector&amp; screenPosition, int range);</comment>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>setBackgroundColor</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QColor</name>&amp;</type>
      <name>col</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QColor</name>
  </type>
  <name>getBackgroundColor</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>int</name>
  </type>
  <name>getMargin</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setMargin</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>m</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setPrinting</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>on</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>isPrinting</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setPrintPreview</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>on</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>isPrintPreview</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setPrintPointSize</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>s</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setColorMode</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RGraphicsView</name>::
        <name>ColorMode</name></name>
      </type>
      <name>cm</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>
    <name>RGraphicsView</name>::
    <name>ColorMode</name></name>
  </type>
  <name>getColorMode</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QList
    <argument_list>&lt;
    <argument>
      <name>RTextLabel</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getTextLabels</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>clearTextLabels</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>addTextLabel</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RTextLabel</name>&amp;</type>
      <name>textLabel</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function>
    <type>
      <name>RVector</name>
    </type>
    <name>getLastKnownMousePosition</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>lastKnownModelPosition</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>double</name>
    </type>
    <name>getCurrentStepScaleFactor</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>currentStepScaleFactor</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setCurrentStepScaleFactor</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>double</name>
        </type>
        <name>f</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>currentStepScaleFactor</name>= 
    <name>f</name></expr>;</expr_stmt>}</block>
  </function>
  <function>
    <type>
      <name>RVector</name>
    </type>
    <name>getCurrentStepOffset</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>currentStepOffset</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setCurrentStepOffset</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>RVector</name>&amp;</type>
        <name>s</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>currentStepOffset</name>= 
    <name>s</name></expr>;</expr_stmt>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setTextHeightThresholdOverride</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>int</name>
        </type>
        <name>v</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>textHeightThresholdOverride</name>= 
    <name>v</name></expr>;</expr_stmt>}</block>
  </function>
  <function>
    <type>
      <name>int</name>
    </type>
    <name>getTextHeightThresholdOverride</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>textHeightThresholdOverride</name>
    </expr>;</return>}</block>
  </function>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>updateTextHeightThreshold</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>isPathVisible</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RPainterPath</name>&amp;</type>
      <name>path</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl></public>
  <protected>protected: 
  <decl_stmt>
  <decl>
    <type>
      <name>bool</name>
    </type>
    <name>printing</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>bool</name>
    </type>
    <name>printPreview</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>RVector</name>
    </type>
    <name>printPointSize</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>ColorMode</name>
    </type>
    <name>colorMode</name>
  </decl>;</decl_stmt>
  <comment type="block">/** * The scene this view is attached to.
  */</comment>
  <decl_stmt>
  <decl>
    <type>
    <name>RGraphicsScene</name>*</type>
    <name>scene</name>
  </decl>;</decl_stmt>
  <comment type="block">/** * Grid that is currently displayed by
  this view or NULL. */</comment>
  <decl_stmt>
  <decl>
    <type>
    <name>RGrid</name>*</type>
    <name>grid</name>
  </decl>;</decl_stmt>
  <comment type="block">/** * The navigation action of this view or
  NULL if no navigation action * has been set. */</comment>
  <decl_stmt>
  <decl>
    <type>
    <name>RAction</name>*</type>
    <name>navigationAction</name>
  </decl>;</decl_stmt>
  <comment type="block">/** * Offset of the zero point from the
  lower left corner of the view in * model coordinates.
  */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>RVector</name>
    </type>
    <name>offset</name>
  </decl>;</decl_stmt>
  <comment type="block">/** * Scale factor from model coordinates
  to view coordinates. */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>double</name>
    </type>
    <name>factor</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>RVector</name>
    </type>
    <name>previousOffset</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>double</name>
    </type>
    <name>previousFactor</name>
  </decl>;</decl_stmt>
  <comment type="block">/** * True to only display entities within
  the horizontal slice that is defined * by the current UCS.
  */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>bool</name>
    </type>
    <name>displayOnlyCurrentUcs</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>bool</name>
    </type>
    <name>autoScalePatterns</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QColor</name>
    </type>
    <name>backgroundColor</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>int</name>
    </type>
    <name>margin</name>
  </decl>;</decl_stmt>
  <comment type="block">/** * Current scale factor caused by a
  pinch gesture. */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>double</name>
    </type>
    <name>currentStepScaleFactor</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>RVector</name>
    </type>
    <name>currentStepOffset</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>RVector</name>
    </type>
    <name>lastKnownModelPosition</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>RVector</name>
    </type>
    <name>lastKnownViewPosition</name>
  </decl>;</decl_stmt>
  <comment type="block">/** * Internal list of text labels that
  were added to this view. */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>QList
      <argument_list>&lt;
      <argument>
        <name>RTextLabel</name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>textLabels</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>int</name>
    </type>
    <name>textHeightThresholdOverride</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>int</name>
    </type>
    <name>textHeightThreshold</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>int</name>
    </type>
    <name>viewportNumber</name>
  </decl>;</decl_stmt>
  <comment type="line">// grid display flag, cached:</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>mutable</name>
      <name>int</name>
    </type>
    <name>gridVisible</name>
  </decl>;</decl_stmt></protected>}</block>;</class>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RGraphicsView::ColorMode</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RGraphicsView*</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>
    QList&lt;RGraphicsView*&gt;</argument>)</argument_list>
  </macro>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
