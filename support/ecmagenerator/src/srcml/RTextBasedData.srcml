<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src"
xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++"
dir="./entity" filename="RTextBasedData.h">
  <comment type="block">/** * Copyright (c) 2011-2013 by Andrew
  Mustun. All rights reserved. * * This file is part of the QCAD
  project. * * QCAD is free software: you can redistribute it
  and/or modify * it under the terms of the GNU General Public
  License as published by * the Free Software Foundation, either
  version 3 of the License, or * (at your option) any later
  version. * * QCAD is distributed in the hope that it will be
  useful, * but WITHOUT ANY WARRANTY; without even the implied
  warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE. See the * GNU General Public License for more details. *
  * You should have received a copy of the GNU General Public
  License * along with QCAD. */</comment>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>RTEXTBASEDDATA_H</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <name>RTEXTBASEDDATA_H</name></cpp:define>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"entity_global.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QTextLayout&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RDocument.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"REntityData.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RPainterPath.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RPainterPathSource.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RVector.h"</cpp:file></cpp:include>
  <class_decl>class 
  <name>QTextDocument</name>;</class_decl>
  <comment type="block">/** * Stores and manages all data that
  defines the geometry and * appearance of a text based entity
  (text, block attribute, block attribute definition). * *
  \scriptable * \sharedPointerSupport * \copyable * \ingroup entity
  */</comment>
  <class>class 
  <macro>
    <name>QCADENTITY_EXPORT</name>
  </macro>
  <name>RTextBasedData</name>
  <super>: 
  <specifier>public</specifier>
  <name>REntityData</name>, 
  <specifier>public</specifier>
  <name>RPainterPathSource</name></super>
  <block>{
  <private type="default">
    <decl_stmt>
    <decl>
      <type>
      <name>friend</name>class</type>
      <name>RTextBasedEntity</name>
    </decl>;</decl_stmt>
  </private>
  <protected>protected: 
  <constructor_decl>
  <name>RTextBasedData</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>RDocument</name>*</type>
      <name>document</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RTextBasedData</name>&amp;</type>
      <name>data</name>
    </decl>
  </param>)</parameter_list>;</constructor_decl></protected>
  <public>public: 
  <constructor_decl>
  <name>RTextBasedData</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
    <name>RDocument</name>*</type>
    <name>document</name>=
    <init>
      <expr>
        <name>NULL</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</constructor_decl>
  <constructor_decl>
  <name>RTextBasedData</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>position</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>alignmentPoint</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>textHeight</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>textWidth</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>
        <name>RS</name>::
        <name>VAlign</name></name>
      </type>
      <name>verticalAlignment</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>
        <name>RS</name>::
        <name>HAlign</name></name>
      </type>
      <name>horizontalAlignment</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>
        <name>RS</name>::
        <name>TextDrawingDirection</name></name>
      </type>
      <name>drawingDirection</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>
        <name>RS</name>::
        <name>TextLineSpacingStyle</name></name>
      </type>
      <name>lineSpacingStyle</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>lineSpacingFactor</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>text</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>fontName</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>bold</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>italic</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>angle</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>simple</name>
    </decl>
  </param>)</parameter_list>;</constructor_decl>
  <destructor>
    <specifier>virtual</specifier>
    <name>~RTextBasedData</name>
    <parameter_list>()</parameter_list>
    <block>{}</block>
  </destructor>
  <function>
    <type>
      <name>bool</name>
    </type>
    <name>isValid</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>!
    <name>text</name>.
    <call>
      <name>isNull</name>
      <argument_list>()</argument_list>
    </call></expr>;</return>}</block>
  </function>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>RBox</name>
  </type>
  <name>getBoundingBox</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>ignoreEmpty</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getWidth</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getHeight</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>sync</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RTextBasedData</name>&amp;</type>
      <name>other</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>RVector</name>
  </type>
  <name>getPointOnEntity</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function>
    <type>
      <name>virtual</name>
      <name>QList
      <argument_list>&lt;
      <argument>
        <name>RVector</name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>getEndPoints</name>
    <parameter_list>(
    <param>
      <decl>
      <type>
      <name>const</name>
      <name>RBox</name>&amp;</type>
      <name>queryBox</name>=
      <init>
        <expr>
          <name>RDEFAULT_RBOX</name>
        </expr>
      </init></decl>
    </param>)</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <constructor_decl>
    <name>Q_UNUSED</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>queryBox</name>
        </type>
      </decl>
    </param>)</parameter_list>;</constructor_decl>
    <return>return 
    <expr>
      <call>
        <name>QList
        <argument_list>&lt;
        <argument>
          <name>RVector</name>
        </argument>&gt;</argument_list></name>
        <argument_list>()</argument_list>
      </call>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>virtual</name>
      <name>QList
      <argument_list>&lt;
      <argument>
        <name>RVector</name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>getMiddlePoints</name>
    <parameter_list>(
    <param>
      <decl>
      <type>
      <name>const</name>
      <name>RBox</name>&amp;</type>
      <name>queryBox</name>=
      <init>
        <expr>
          <name>RDEFAULT_RBOX</name>
        </expr>
      </init></decl>
    </param>)</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <constructor_decl>
    <name>Q_UNUSED</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>queryBox</name>
        </type>
      </decl>
    </param>)</parameter_list>;</constructor_decl>
    <return>return 
    <expr>
      <call>
        <name>QList
        <argument_list>&lt;
        <argument>
          <name>RVector</name>
        </argument>&gt;</argument_list></name>
        <argument_list>()</argument_list>
      </call>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>virtual</name>
      <name>QList
      <argument_list>&lt;
      <argument>
        <name>RVector</name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>getCenterPoints</name>
    <parameter_list>(
    <param>
      <decl>
      <type>
      <name>const</name>
      <name>RBox</name>&amp;</type>
      <name>queryBox</name>=
      <init>
        <expr>
          <name>RDEFAULT_RBOX</name>
        </expr>
      </init></decl>
    </param>)</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <constructor_decl>
    <name>Q_UNUSED</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>queryBox</name>
        </type>
      </decl>
    </param>)</parameter_list>;</constructor_decl>
    <return>return 
    <expr>
      <call>
        <name>QList
        <argument_list>&lt;
        <argument>
          <name>RVector</name>
        </argument>&gt;</argument_list></name>
        <argument_list>()</argument_list>
      </call>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>virtual</name>
      <name>QList
      <argument_list>&lt;
      <argument>
        <name>RVector</name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>getPointsWithDistanceToEnd</name>
    <parameter_list>( 
    <param>
      <decl>
        <type>
          <name>double</name>
        </type>
        <name>distance</name>
      </decl>
    </param>, 
    <param>
      <decl>
      <type>
        <name>
        <name>RS</name>::
        <name>From</name></name>
      </type>
      <name>from</name>=
      <init>
        <expr>
          <name>
          <name>RS</name>::
          <name>FromAny</name></name>
        </expr>
      </init></decl>
    </param>, 
    <param>
      <decl>
      <type>
      <name>const</name>
      <name>RBox</name>&amp;</type>
      <name>queryBox</name>=
      <init>
        <expr>
          <name>RDEFAULT_RBOX</name>
        </expr>
      </init></decl>
    </param>)</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <constructor_decl>
    <name>Q_UNUSED</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>distance</name>
        </type>
      </decl>
    </param>)</parameter_list>;</constructor_decl>
    <constructor_decl>
    <name>Q_UNUSED</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>from</name>
        </type>
      </decl>
    </param>)</parameter_list>;</constructor_decl>
    <constructor_decl>
    <name>Q_UNUSED</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>queryBox</name>
        </type>
      </decl>
    </param>)</parameter_list>;</constructor_decl>
    <return>return 
    <expr>
      <call>
        <name>QList
        <argument_list>&lt;
        <argument>
          <name>RVector</name>
        </argument>&gt;</argument_list></name>
        <argument_list>()</argument_list>
      </call>
    </expr>;</return>}</block>
  </function>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>double</name>
  </type>
  <name>getDistanceTo</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>point</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>limited</name>=
    <init>
      <expr>
        <name>true</name>
      </expr>
    </init></decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>double</name>
    </type>
    <name>range</name>=
    <init>
      <expr>0.0</expr>
    </init></decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>draft</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>intersectsWith</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RShape</name>&amp;</type>
      <name>shape</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function>
    <type>
      <name>RVector</name>
    </type>
    <name>getPosition</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>position</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setPosition</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>RVector</name>&amp;</type>
        <name>position</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>this</name>-&gt;
    <name>position</name>= 
    <name>position</name></expr>;</expr_stmt>}</block>
  </function>
  <function>
    <type>
      <name>RVector</name>
    </type>
    <name>getAlignmentPoint</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>alignmentPoint</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setAlignmentPoint</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>RVector</name>&amp;</type>
        <name>alignmentPoint</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>this</name>-&gt;
    <name>alignmentPoint</name>= 
    <name>alignmentPoint</name></expr>;</expr_stmt>}</block>
  </function>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setText</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>text</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function>
    <type>
      <name>QString</name>
    </type>
    <name>getFontName</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>fontName</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setFontName</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>QString</name>&amp;</type>
        <name>fontName</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>this</name>-&gt;
    <name>fontName</name>= 
    <name>fontName</name></expr>;</expr_stmt>
    <constructor_decl>
    <name>update</name>
    <parameter_list>
    ()</parameter_list>;</constructor_decl>}</block>
  </function>
  <function>
    <type>
      <name>bool</name>
    </type>
    <name>isBold</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>bold</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setBold</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>bool</name>
        </type>
        <name>on</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>bold</name>= 
    <name>on</name></expr>;</expr_stmt>
    <constructor_decl>
    <name>update</name>
    <parameter_list>
    ()</parameter_list>;</constructor_decl>}</block>
  </function>
  <function>
    <type>
      <name>bool</name>
    </type>
    <name>isItalic</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>italic</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setItalic</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>bool</name>
        </type>
        <name>on</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>italic</name>= 
    <name>on</name></expr>;</expr_stmt>
    <constructor_decl>
    <name>update</name>
    <parameter_list>
    ()</parameter_list>;</constructor_decl>}</block>
  </function>
  <function>
    <type>
      <name>double</name>
    </type>
    <name>getTextHeight</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>textHeight</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setTextHeight</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>double</name>
        </type>
        <name>h</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>this</name>-&gt;
    <name>textHeight</name>= 
    <name>h</name></expr>;</expr_stmt>
    <constructor_decl>
    <name>update</name>
    <parameter_list>
    ()</parameter_list>;</constructor_decl>}</block>
  </function>
  <comment type="block">/** * Width of the text box used for line
  wrapping (not supported). */</comment>
  <function>
    <type>
      <name>double</name>
    </type>
    <name>getTextWidth</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>textWidth</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setTextWidth</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>double</name>
        </type>
        <name>w</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>this</name>-&gt;
    <name>textWidth</name>= 
    <name>w</name></expr>;</expr_stmt>
    <constructor_decl>
    <name>update</name>
    <parameter_list>
    ()</parameter_list>;</constructor_decl>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setVAlign</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>
          <name>RS</name>::
          <name>VAlign</name></name>
        </type>
        <name>valign</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>this</name>-&gt;
    <name>verticalAlignment</name>= 
    <name>valign</name></expr>;</expr_stmt>
    <constructor_decl>
    <name>update</name>
    <parameter_list>
    ()</parameter_list>;</constructor_decl>}</block>
  </function>
  <function>
    <type>
      <name>
      <name>RS</name>::
      <name>VAlign</name></name>
    </type>
    <name>getVAlign</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
    <name>this</name>-&gt;
    <name>verticalAlignment</name></expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setHAlign</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>
          <name>RS</name>::
          <name>HAlign</name></name>
        </type>
        <name>halign</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>this</name>-&gt;
    <name>horizontalAlignment</name>= 
    <name>halign</name></expr>;</expr_stmt>
    <constructor_decl>
    <name>update</name>
    <parameter_list>
    ()</parameter_list>;</constructor_decl>}</block>
  </function>
  <function>
    <type>
      <name>
      <name>RS</name>::
      <name>HAlign</name></name>
    </type>
    <name>getHAlign</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
    <name>this</name>-&gt;
    <name>horizontalAlignment</name></expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setDrawingDirection</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>
          <name>RS</name>::
          <name>TextDrawingDirection</name></name>
        </type>
        <name>drawingDirection</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>this</name>-&gt;
    <name>drawingDirection</name>= 
    <name>drawingDirection</name></expr>;</expr_stmt>
    <constructor_decl>
    <name>update</name>
    <parameter_list>
    ()</parameter_list>;</constructor_decl>}</block>
  </function>
  <function>
    <type>
      <name>
      <name>RS</name>::
      <name>TextDrawingDirection</name></name>
    </type>
    <name>getDrawingDirection</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>drawingDirection</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setLineSpacingStyle</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>
          <name>RS</name>::
          <name>TextLineSpacingStyle</name></name>
        </type>
        <name>lineSpacingStyle</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>this</name>-&gt;
    <name>lineSpacingStyle</name>= 
    <name>lineSpacingStyle</name></expr>;</expr_stmt>
    <constructor_decl>
    <name>update</name>
    <parameter_list>
    ()</parameter_list>;</constructor_decl>}</block>
  </function>
  <function>
    <type>
      <name>
      <name>RS</name>::
      <name>TextLineSpacingStyle</name></name>
    </type>
    <name>getLineSpacingStyle</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>lineSpacingStyle</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setLineSpacingFactor</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>double</name>
        </type>
        <name>lineSpacingFactor</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>this</name>-&gt;
    <name>lineSpacingFactor</name>= 
    <name>lineSpacingFactor</name></expr>;</expr_stmt>
    <constructor_decl>
    <name>update</name>
    <parameter_list>
    ()</parameter_list>;</constructor_decl>}</block>
  </function>
  <function>
    <type>
      <name>double</name>
    </type>
    <name>getLineSpacingFactor</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>lineSpacingFactor</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setAngle</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>double</name>
        </type>
        <name>angle</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>this</name>-&gt;
    <name>angle</name>= 
    <name>angle</name></expr>;</expr_stmt>
    <constructor_decl>
    <name>update</name>
    <parameter_list>
    ()</parameter_list>;</constructor_decl>}</block>
  </function>
  <function>
    <type>
      <name>double</name>
    </type>
    <name>getAngle</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>angle</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setXScale</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>double</name>
        </type>
        <name>xScale</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>this</name>-&gt;
    <name>xScale</name>= 
    <name>xScale</name></expr>;</expr_stmt>
    <constructor_decl>
    <name>update</name>
    <parameter_list>
    ()</parameter_list>;</constructor_decl>}</block>
  </function>
  <function>
    <type>
      <name>double</name>
    </type>
    <name>getXScale</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>xScale</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setSimple</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>bool</name>
        </type>
        <name>on</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>simple</name>= 
    <name>on</name></expr>;</expr_stmt>
    <constructor_decl>
    <name>update</name>
    <parameter_list>
    ()</parameter_list>;</constructor_decl>}</block>
  </function>
  <function>
    <type>
      <name>bool</name>
    </type>
    <name>isSimple</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>simple</name>
    </expr>;</return>}</block>
  </function>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QList
    <argument_list>&lt;
    <argument>
      <name>RVector</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getReferencePoints</name>
  <parameter_list>( 
  <param>
    <decl>
    <type>
      <name>
      <name>RS</name>::
      <name>ProjectionRenderingHint</name></name>
    </type>
    <name>hint</name>=
    <init>
      <expr>
        <name>
        <name>RS</name>::
        <name>RenderTop</name></name>
      </expr>
    </init></decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>moveReferencePoint</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>referencePoint</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>targetPoint</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>move</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>offset</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>rotate</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>rotation</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>center</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>scale</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>scaleFactors</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>center</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>mirror</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RLine</name>&amp;</type>
      <name>axis</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>flipHorizontal</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>flipVertical</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function>
    <type>
      <name>virtual</name>
      <name>QString</name>
    </type>
    <name>getText</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>text</name>
    </expr>;</return>}</block>
  </function>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QString</name>
  </type>
  <name>getRenderedText</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>escapeUnicode</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QString</name>
  </type>
  <name>getPlainText</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QString</name>
  </type>
  <name>getEscapedText</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>escapeUnicode</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>static</name>
    <name>QString</name>
  </type>
  <name>escapeUnicode</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>str</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QFont</name>
  </type>
  <name>getMainFont</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>update</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>isDirty</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QList
    <argument_list>&lt;
    <argument>
      <name>RPainterPath</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getPainterPaths</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>draft</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QList
    <argument_list>&lt;
    <argument>
      <name>QSharedPointer
      <argument_list>&lt;
      <argument>
        <name>RShape</name>
      </argument>&gt;</argument_list></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getShapes</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
    <name>const</name>
    <name>RBox</name>&amp;</type>
    <name>queryBox</name>=
    <init>
      <expr>
        <name>RDEFAULT_RBOX</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QList
    <argument_list>&lt;
    <argument>
      <name>QSharedPointer
      <argument_list>&lt;
      <argument>
        <name>RShape</name>
      </argument>&gt;</argument_list></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getExploded</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function>
    <type>
      <name>virtual</name>
      <name>QSharedPointer
      <argument_list>&lt;
      <argument>
        <name>RShape</name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>getClosestShape</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>RVector</name>&amp;</type>
        <name>pos</name>
      </decl>
    </param>, 
    <param>
      <decl>
      <type>
        <name>double</name>
      </type>
      <name>range</name>=
      <init>
        <expr>
          <name>RNANDOUBLE</name>
        </expr>
      </init></decl>
    </param>)</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <constructor_decl>
    <name>Q_UNUSED</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>pos</name>
        </type>
      </decl>
    </param>)</parameter_list>;</constructor_decl>
    <constructor_decl>
    <name>Q_UNUSED</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>range</name>
        </type>
      </decl>
    </param>)</parameter_list>;</constructor_decl>
    <return>return 
    <expr>
      <call>
        <name>QSharedPointer
        <argument_list>&lt;
        <argument>
          <name>RShape</name>
        </argument>&gt;</argument_list></name>
        <argument_list>()</argument_list>
      </call>
    </expr>;</return>}</block>
  </function>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>RVector</name>
  </type>
  <name>getClosestPointOnEntity</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>point</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>range</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>limited</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <comment type="line">// virtual RTextBasedData
  getRenderedTextData() const {</comment>
  <comment type="line">// return *this;</comment>
  <comment type="line">// }</comment>
  <function_decl>
  <type>
    <name>static</name>
    <name>QString</name>
  </type>
  <name>toEscapedText</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QTextDocument</name>&amp;</type>
      <name>textDocument</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RColor</name>&amp;</type>
      <name>initialColor</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>double</name>
    </type>
    <name>fontHeightFactor</name>=
    <init>
      <expr>1.0</expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>static</name>
    <name>QString</name>
  </type>
  <name>toRichText</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>escapedText</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QFont</name>&amp;</type>
      <name>mainFont</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>double</name>
    </type>
    <name>fontHeightFactor</name>=
    <init>
      <expr>1.0</expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <comment type="block">/** * \nonscriptable */</comment>
  <function_decl>
  <type>
    <name>friend</name>
    <name>QDebug</name>
  </type>
  <name>operator&lt;&lt;</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>QDebug</name>
      </type>
      <name>dbg</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RTextBasedData</name>&amp;</type>
      <name>t</name>
    </decl>
  </param>)</parameter_list>;</function_decl></public>
  <protected>protected: 
  <decl_stmt>
  <decl>
    <type>
      <name>QString</name>
    </type>
    <name>text</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>RVector</name>
    </type>
    <name>position</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>RVector</name>
    </type>
    <name>alignmentPoint</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>double</name>
    </type>
    <name>textHeight</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>double</name>
    </type>
    <name>textWidth</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>
      <name>RS</name>::
      <name>VAlign</name></name>
    </type>
    <name>verticalAlignment</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>
      <name>RS</name>::
      <name>HAlign</name></name>
    </type>
    <name>horizontalAlignment</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>
      <name>RS</name>::
      <name>TextDrawingDirection</name></name>
    </type>
    <name>drawingDirection</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>
      <name>RS</name>::
      <name>TextLineSpacingStyle</name></name>
    </type>
    <name>lineSpacingStyle</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>double</name>
    </type>
    <name>lineSpacingFactor</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QString</name>
    </type>
    <name>fontName</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>bool</name>
    </type>
    <name>bold</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>bool</name>
    </type>
    <name>italic</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>double</name>
    </type>
    <name>angle</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>double</name>
    </type>
    <name>xScale</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>bool</name>
    </type>
    <name>simple</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>mutable</name>
      <name>double</name>
    </type>
    <name>height</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>mutable</name>
      <name>double</name>
    </type>
    <name>width</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>mutable</name>
      <name>RBox</name>
    </type>
    <name>boundingBox</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>mutable</name>
      <name>QList
      <argument_list>&lt;
      <argument>
        <name>RPainterPath</name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>painterPaths</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>mutable</name>
      <name>bool</name>
    </type>
    <name>dirty</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>mutable</name>
      <name>bool</name>
    </type>
    <name>gotDraft</name>
  </decl>;</decl_stmt></protected>}</block>;</class>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RTextBasedData</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RTextBasedData*</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>const RTextBasedData*</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>
    QSharedPointer&lt;RTextBasedData&gt;</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>
    QSharedPointer&lt;RTextBasedData&gt;*</argument>)</argument_list>
  </macro>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
