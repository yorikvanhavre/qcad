<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src"
xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++"
dir="./entity" filename="RSolidData.h">
  <comment type="block">/** * Copyright (c) 2011-2013 by Andrew
  Mustun. All rights reserved. * * This file is part of the QCAD
  project. * * QCAD is free software: you can redistribute it
  and/or modify * it under the terms of the GNU General Public
  License as published by * the Free Software Foundation, either
  version 3 of the License, or * (at your option) any later
  version. * * QCAD is distributed in the hope that it will be
  useful, * but WITHOUT ANY WARRANTY; without even the implied
  warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE. See the * GNU General Public License for more details. *
  * You should have received a copy of the GNU General Public
  License * along with QCAD. */</comment>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>RSOLIDDATA_H</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <name>RSOLIDDATA_H</name></cpp:define>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"entity_global.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RBox.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RDocument.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"REntity.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RPolyline.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RVector.h"</cpp:file></cpp:include>
  <comment type="block">/** * Stores and manages all data that
  defines the geometry and * appearance of a solid entity. * *
  \scriptable * \ingroup entity */</comment>
  <class>class 
  <macro>
    <name>QCADENTITY_EXPORT</name>
  </macro>
  <name>RSolidData</name>
  <super>: 
  <specifier>public</specifier>
  <name>REntityData</name>, 
  <specifier>protected</specifier>
  <name>RPolyline</name></super>
  <block>{
  <private type="default">
    <decl_stmt>
    <decl>
      <type>
      <name>friend</name>class</type>
      <name>RSolidEntity</name>
    </decl>;</decl_stmt>
  </private>
  <protected>protected: 
  <constructor_decl>
  <name>RSolidData</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>RDocument</name>*</type>
      <name>document</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RSolidData</name>&amp;</type>
      <name>data</name>
    </decl>
  </param>)</parameter_list>;</constructor_decl></protected>
  <public>public: 
  <constructor_decl>
  <name>RSolidData</name>
  <parameter_list>()</parameter_list>;</constructor_decl>
  <constructor_decl>
  <name>RSolidData</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RTriangle</name>&amp;</type>
      <name>triangle</name>
    </decl>
  </param>)</parameter_list>;</constructor_decl>
  <constructor_decl>
  <name>RSolidData</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>p1</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>p2</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>p3</name>
    </decl>
  </param>)</parameter_list>;</constructor_decl>
  <constructor_decl>
  <name>RSolidData</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>p1</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>p2</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>p3</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>p4</name>
    </decl>
  </param>)</parameter_list>;</constructor_decl>
  <function>
    <type>
      <name>RVector</name>
    </type>
    <name>getStartPoint</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <call>
        <name>
        <name>RPolyline</name>::
        <name>getStartPoint</name></name>
        <argument_list>()</argument_list>
      </call>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>RVector</name>
    </type>
    <name>getEndPoint</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <call>
        <name>
        <name>RPolyline</name>::
        <name>getEndPoint</name></name>
        <argument_list>()</argument_list>
      </call>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>double</name>
    </type>
    <name>getDirection1</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <call>
        <name>
        <name>RPolyline</name>::
        <name>getDirection1</name></name>
        <argument_list>()</argument_list>
      </call>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>double</name>
    </type>
    <name>getDirection2</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <call>
        <name>
        <name>RPolyline</name>::
        <name>getDirection2</name></name>
        <argument_list>()</argument_list>
      </call>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>bool</name>
    </type>
    <name>reverse</name>
    <parameter_list>()</parameter_list>
    <block>{ 
    <return>return 
    <expr>
      <call>
        <name>
        <name>RPolyline</name>::
        <name>reverse</name></name>
        <argument_list>()</argument_list>
      </call>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>RVector</name>
    </type>
    <name>getVertexAt</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>int</name>
        </type>
        <name>i</name>
      </decl>
    </param>)</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <call>
        <name>
        <name>RPolyline</name>::
        <name>getVertexAt</name></name>
        <argument_list>(
        <argument>
          <expr>
            <name>i</name>
          </expr>
        </argument>)</argument_list>
      </call>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>int</name>
    </type>
    <name>countVertices</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <call>
        <name>
        <name>RPolyline</name>::
        <name>countVertices</name></name>
        <argument_list>()</argument_list>
      </call>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>
      <name>RS</name>::
      <name>Ending</name></name>
    </type>
    <name>getTrimEnd</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>RVector</name>&amp;</type>
        <name>coord</name>
      </decl>
    </param>, 
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>RVector</name>&amp;</type>
        <name>trimPoint</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <return>return 
    <expr>
      <call>
        <name>
        <name>RPolyline</name>::
        <name>getTrimEnd</name></name>
        <argument_list>(
        <argument>
          <expr>
            <name>coord</name>
          </expr>
        </argument>, 
        <argument>
          <expr>
            <name>trimPoint</name>
          </expr>
        </argument>)</argument_list>
      </call>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>trimStartPoint</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>RVector</name>&amp;</type>
        <name>p</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <return>return 
    <expr>
      <call>
        <name>
        <name>RPolyline</name>::
        <name>trimStartPoint</name></name>
        <argument_list>(
        <argument>
          <expr>
            <name>p</name>
          </expr>
        </argument>)</argument_list>
      </call>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>trimEndPoint</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>RVector</name>&amp;</type>
        <name>p</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <return>return 
    <expr>
      <call>
        <name>
        <name>RPolyline</name>::
        <name>trimEndPoint</name></name>
        <argument_list>(
        <argument>
          <expr>
            <name>p</name>
          </expr>
        </argument>)</argument_list>
      </call>
    </expr>;</return>}</block>
  </function>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QList
    <argument_list>&lt;
    <argument>
      <name>RVector</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getReferencePoints</name>
  <parameter_list>( 
  <param>
    <decl>
    <type>
      <name>
      <name>RS</name>::
      <name>ProjectionRenderingHint</name></name>
    </type>
    <name>hint</name>=
    <init>
      <expr>
        <name>
        <name>RS</name>::
        <name>RenderTop</name></name>
      </expr>
    </init></decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>moveReferencePoint</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>referencePoint</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>targetPoint</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function>
    <type>
    <name>virtual</name>
    <name>RShape</name>*</type>
    <name>castToShape</name>
    <parameter_list>()</parameter_list>
    <block>{ 
    <return>return 
    <expr>
      <name>this</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>virtual</name>
      <name>QList
      <argument_list>&lt;
      <argument>
        <name>QSharedPointer
        <argument_list>&lt;
        <argument>
          <name>RShape</name>
        </argument>&gt;</argument_list></name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>getShapes</name>
    <parameter_list>(
    <param>
      <decl>
      <type>
      <name>const</name>
      <name>RBox</name>&amp;</type>
      <name>queryBox</name>=
      <init>
        <expr>
          <name>RDEFAULT_RBOX</name>
        </expr>
      </init></decl>
    </param>)</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <macro>
      <name>Q_UNUSED</name>
      <argument_list>(
      <argument>queryBox</argument>)</argument_list>
    </macro>
    <return>return 
    <expr>
    <call>
      <name>QList
      <argument_list>&lt;
      <argument>
        <name>QSharedPointer
        <argument_list>&lt;
        <argument>
          <name>RShape</name>
        </argument>&gt;</argument_list></name>
      </argument>&gt;</argument_list></name>
      <argument_list>()</argument_list>
    </call>&lt;&lt; 
    <call>
      <name>QSharedPointer
      <argument_list>&lt;
      <argument>
        <name>RShape</name>
      </argument>&gt;</argument_list></name>
      <argument_list>(
      <argument>
        <expr>new 
        <call>
          <name>RPolyline</name>
          <argument_list>(
          <argument>
            <expr>*
            <name>this</name></expr>
          </argument>)</argument_list>
        </call></expr>
      </argument>)</argument_list>
    </call></expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>RPolyline</name>
    </type>
    <name>getGeometry</name>
    <parameter_list>()</parameter_list>
    <block>{ 
    <return>return 
    <expr>*
    <name>this</name></expr>;</return>}</block>
  </function></public>}</block>;</class>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RSolidData*</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>const RSolidData*</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>
    QSharedPointer&lt;RSolidData&gt;</argument>)</argument_list>
  </macro>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
