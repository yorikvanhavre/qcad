<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src"
xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++"
dir="./entity" filename="RDimensionData.h">
  <comment type="block">/** * Copyright (c) 2011-2013 by Andrew
  Mustun. All rights reserved. * * This file is part of the QCAD
  project. * * QCAD is free software: you can redistribute it
  and/or modify * it under the terms of the GNU General Public
  License as published by * the Free Software Foundation, either
  version 3 of the License, or * (at your option) any later
  version. * * QCAD is distributed in the hope that it will be
  useful, * but WITHOUT ANY WARRANTY; without even the implied
  warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE. See the * GNU General Public License for more details. *
  * You should have received a copy of the GNU General Public
  License * along with QCAD. */</comment>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>RDIMENSIONDATA_H</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <name>RDIMENSIONDATA_H</name></cpp:define>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"entity_global.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RDocument.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"REntityData.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RTextData.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RVector.h"</cpp:file></cpp:include>
  <comment type="block">/** * Base class for dimension entity data
  classes. * * \scriptable * \ingroup entity * * \todo explodable
  interface that returns list of REntityData, maybe base class
  RComposedEntityData? */</comment>
  <class>class 
  <macro>
    <name>QCADENTITY_EXPORT</name>
  </macro>
  <name>RDimensionData</name>
  <super>: 
  <specifier>public</specifier>
  <name>REntityData</name></super>
  <block>{
  <private type="default">
    <decl_stmt>
    <decl>
      <type>
      <name>friend</name>class</type>
      <name>RDimensionEntity</name>
    </decl>;</decl_stmt>
  </private>
  <protected>protected: 
  <constructor_decl>
  <name>RDimensionData</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>RDocument</name>*</type>
      <name>document</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RDimensionData</name>&amp;</type>
      <name>data</name>
    </decl>
  </param>)</parameter_list>;</constructor_decl></protected>
  <public>public: 
  <constructor_decl>
  <name>RDimensionData</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
    <name>RDocument</name>*</type>
    <name>document</name>=
    <init>
      <expr>
        <name>NULL</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</constructor_decl>
  <constructor_decl>
  <name>RDimensionData</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>definitionPoint</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>textPositionCenter</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>
        <name>RS</name>::
        <name>VAlign</name></name>
      </type>
      <name>valign</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>
        <name>RS</name>::
        <name>HAlign</name></name>
      </type>
      <name>halign</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>
        <name>RS</name>::
        <name>TextLineSpacingStyle</name></name>
      </type>
      <name>lineSpacingStyle</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>lineSpacingFactor</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>text</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>fontName</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>textAngle</name>
    </decl>
  </param>)</parameter_list>;</constructor_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>RBox</name>
  </type>
  <name>getBoundingBox</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>ignoreEmpty</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>isValid</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setDefinitionPoint</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>RVector</name>&amp;</type>
        <name>p</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>definitionPoint</name>= 
    <name>p</name></expr>;</expr_stmt>
    <constructor_decl>
    <name>update</name>
    <parameter_list>
    ()</parameter_list>;</constructor_decl>}</block>
  </function>
  <function>
    <type>
      <name>RVector</name>
    </type>
    <name>getDefinitionPoint</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>definitionPoint</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setText</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>QString</name>&amp;</type>
        <name>t</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>text</name>= 
    <name>t</name></expr>;</expr_stmt>
    <constructor_decl>
    <name>update</name>
    <parameter_list>
    ()</parameter_list>;</constructor_decl>}</block>
  </function>
  <function>
    <type>
      <name>QString</name>
    </type>
    <name>getText</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>text</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setUpperTolerance</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>QString</name>&amp;</type>
        <name>t</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>upperTolerance</name>= 
    <name>t</name></expr>;</expr_stmt>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setLowerTolerance</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>QString</name>&amp;</type>
        <name>t</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>lowerTolerance</name>= 
    <name>t</name></expr>;</expr_stmt>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setTextPosition</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>RVector</name>&amp;</type>
        <name>p</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>textPositionCenter</name>= 
    <name>p</name></expr>;</expr_stmt>
    <expr_stmt>
    <expr>
    <name>textPositionSide</name>= 
    <name>
    <name>RVector</name>::
    <name>invalid</name></name></expr>;</expr_stmt>
    <constructor_decl>
    <name>update</name>
    <parameter_list>
    ()</parameter_list>;</constructor_decl>}</block>
  </function>
  <function>
    <type>
      <name>RVector</name>
    </type>
    <name>getTextPosition</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <if>if 
    <condition>(
    <expr>
    <name>textPositionSide</name>.
    <call>
      <name>isValid</name>
      <argument_list>()</argument_list>
    </call></expr>)</condition>
    <then>
      <block>{ 
      <return>return 
      <expr>
        <name>textPositionSide</name>
      </expr>;</return>}</block>
    </then>
    <else>else 
    <block>{ 
    <return>return 
    <expr>
      <name>textPositionCenter</name>
    </expr>;</return>}</block></else></if>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setFontName</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>QString</name>&amp;</type>
        <name>fn</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>fontName</name>= 
    <name>fn</name></expr>;</expr_stmt>
    <constructor_decl>
    <name>update</name>
    <parameter_list>
    ()</parameter_list>;</constructor_decl>}</block>
  </function>
  <function>
    <type>
      <name>QString</name>
    </type>
    <name>getFontName</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>fontName</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>double</name>
    </type>
    <name>getLinearFactor</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>linearFactor</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setLinearFactor</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>double</name>
        </type>
        <name>f</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>linearFactor</name>= 
    <name>f</name></expr>;</expr_stmt>}</block>
  </function>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>double</name>
  </type>
  <name>getDistanceTo</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>point</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>limited</name>=
    <init>
      <expr>
        <name>true</name>
      </expr>
    </init></decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>double</name>
    </type>
    <name>range</name>=
    <init>
      <expr>0.0</expr>
    </init></decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>draft</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>intersectsWith</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RShape</name>&amp;</type>
      <name>shape</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QList
    <argument_list>&lt;
    <argument>
      <name>RVector</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getReferencePoints</name>
  <parameter_list>( 
  <param>
    <decl>
    <type>
      <name>
      <name>RS</name>::
      <name>ProjectionRenderingHint</name></name>
    </type>
    <name>hint</name>=
    <init>
      <expr>
        <name>
        <name>RS</name>::
        <name>RenderTop</name></name>
      </expr>
    </init></decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>moveReferencePoint</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>referencePoint</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>targetPoint</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>move</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>offset</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>rotate</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>rotation</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>center</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>scale</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>scaleFactors</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>center</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>mirror</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RLine</name>&amp;</type>
      <name>axis</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getDimscale</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getDimexo</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getDimexe</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getDimasz</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getDimgap</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getDimtxt</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>useArchTick</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>hasCustomTextPosition</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setCustomTextPosition</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>on</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function>
    <type>
      <name>
      <name>RS</name>::
      <name>TextLineSpacingStyle</name></name>
    </type>
    <name>getLineSpacingStyle</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>lineSpacingStyle</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>double</name>
    </type>
    <name>getLineSpacingFactor</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>lineSpacingFactor</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>double</name>
    </type>
    <name>getTextAngle</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>textAngle</name>
    </expr>;</return>}</block>
  </function>
  <function_decl>
  <type>
    <name>QList
    <argument_list>&lt;
    <argument>
      <name>QSharedPointer
      <argument_list>&lt;
      <argument>
        <name>RShape</name>
      </argument>&gt;</argument_list></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getDimensionLineShapes</name>
  <parameter_list>( 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>p1</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>p2</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>arrow1</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>arrow2</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QList
    <argument_list>&lt;
    <argument>
      <name>QSharedPointer
      <argument_list>&lt;
      <argument>
        <name>RShape</name>
      </argument>&gt;</argument_list></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getArrow</name>
  <parameter_list>( 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>position</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>direction</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
  <name>RTextData</name>&amp;</type>
  <name>getTextData</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>initTextData</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>updateTextData</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QString</name>
  </type>
  <name>getMeasurement</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>resolveAutoMeasurement</name>=
    <init>
      <expr>
        <name>true</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function>
    <type>
      <name>virtual</name>
      <name>double</name>
    </type>
    <name>getMeasuredValue</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>0.0</expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>virtual</name>
      <name>QString</name>
    </type>
    <name>getAutoLabel</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>""</expr>;</return>}</block>
  </function>
  <function_decl>
  <type>
    <name>QString</name>
  </type>
  <name>formatLabel</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>distance</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QString</name>
  </type>
  <name>formatAngleLabel</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>textAngle</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <comment type="line">//virtual void updateFromTextPosition() =
  0;</comment>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>update</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl></public>
  <protected>protected: 
  <comment type="block">/** Definition point */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>mutable</name>
      <name>RVector</name>
    </type>
    <name>definitionPoint</name>
  </decl>;</decl_stmt>
  <comment type="block">/** Middle point of dimension text
  */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>mutable</name>
      <name>RVector</name>
    </type>
    <name>textPositionCenter</name>
  </decl>;</decl_stmt>
  <comment type="block">/** * Middle point of dimension text when
  automatically moved to * the side for lack of space */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>mutable</name>
      <name>RVector</name>
    </type>
    <name>textPositionSide</name>
  </decl>;</decl_stmt>
  <comment type="block">/** Vertical alignment */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>
      <name>RS</name>::
      <name>VAlign</name></name>
    </type>
    <name>valign</name>
  </decl>;</decl_stmt>
  <comment type="block">/** Horizontal alignment */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>
      <name>RS</name>::
      <name>HAlign</name></name>
    </type>
    <name>halign</name>
  </decl>;</decl_stmt>
  <comment type="block">/** Line spacing style */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>
      <name>RS</name>::
      <name>TextLineSpacingStyle</name></name>
    </type>
    <name>lineSpacingStyle</name>
  </decl>;</decl_stmt>
  <comment type="block">/** Line spacing factor */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>double</name>
    </type>
    <name>lineSpacingFactor</name>
  </decl>;</decl_stmt>
  <comment type="block">/** * Text string entered explicitly by
  user or null * or "&lt;&gt;" for the actual measurement or " "
  (one blank space) * for supressing the text. */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>QString</name>
    </type>
    <name>text</name>
  </decl>;</decl_stmt>
  <comment type="block">/** Upper tolerance limit */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>QString</name>
    </type>
    <name>upperTolerance</name>
  </decl>;</decl_stmt>
  <comment type="block">/** Lower tolerance limit */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>QString</name>
    </type>
    <name>lowerTolerance</name>
  </decl>;</decl_stmt>
  <comment type="block">/** Dimension font name */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>QString</name>
    </type>
    <name>fontName</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>mutable</name>
      <name>double</name>
    </type>
    <name>defaultAngle</name>
  </decl>;</decl_stmt>
  <comment type="block">/** Rotation angle of dimension text away
  from default orientation */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>double</name>
    </type>
    <name>textAngle</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>double</name>
    </type>
    <name>linearFactor</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>mutable</name>
      <name>bool</name>
    </type>
    <name>dirty</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>mutable</name>
      <name>RTextData</name>
    </type>
    <name>textData</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>mutable</name>
      <name>RBox</name>
    </type>
    <name>boundingBox</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>mutable</name>
      <name>double</name>
    </type>
    <name>dimLineLength</name>
  </decl>;</decl_stmt>
  <comment type="block">/** True if the textPosition should be
  automatically calculated. */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>mutable</name>
      <name>bool</name>
    </type>
    <name>autoTextPos</name>
  </decl>;</decl_stmt></protected>}</block>;</class>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RDimensionData*</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>const RDimensionData*</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>
    QSharedPointer&lt;RDimensionData&gt;</argument>)</argument_list>
  </macro>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
